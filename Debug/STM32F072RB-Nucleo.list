
STM32F072RB-Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001858  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08001918  08001918  00011918  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001954  08001954  00011954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001958  08001958  00011958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  0800195c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000104  20000070  080019cc  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20000174  080019cc  00020174  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000776b  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001a15  00000000  00000000  00027803  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002e90  00000000  00000000  00029218  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000005f0  00000000  00000000  0002c0a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000006f8  00000000  00000000  0002c698  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00014b94  00000000  00000000  0002cd90  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00006c5c  00000000  00000000  00041924  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0007247a  00000000  00000000  00048580  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  000ba9fa  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000f88  00000000  00000000  000baa78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001900 	.word	0x08001900

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08001900 	.word	0x08001900

08000108 <__gnu_thumb1_case_sqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5609      	ldrsb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_uqi>:
 800011c:	b402      	push	{r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	5c09      	ldrb	r1, [r1, r0]
 8000126:	0049      	lsls	r1, r1, #1
 8000128:	448e      	add	lr, r1
 800012a:	bc02      	pop	{r1}
 800012c:	4770      	bx	lr
 800012e:	46c0      	nop			; (mov r8, r8)

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f806 	bl	8000244 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__aeabi_idiv0>:
 8000244:	4770      	bx	lr
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <BSP_LED_Init>:
  *         This parameter can be one of the following values:
  * @arg LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000248:	b510      	push	{r4, lr}
 800024a:	b086      	sub	sp, #24
  GPIO_InitTypeDef  gpioinitstruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800024c:	2800      	cmp	r0, #0
 800024e:	d109      	bne.n	8000264 <BSP_LED_Init+0x1c>
 8000250:	2480      	movs	r4, #128	; 0x80
 8000252:	4a0c      	ldr	r2, [pc, #48]	; (8000284 <BSP_LED_Init+0x3c>)
 8000254:	02a4      	lsls	r4, r4, #10
 8000256:	6951      	ldr	r1, [r2, #20]
 8000258:	4321      	orrs	r1, r4
 800025a:	6151      	str	r1, [r2, #20]
 800025c:	6953      	ldr	r3, [r2, #20]
 800025e:	4023      	ands	r3, r4
 8000260:	9300      	str	r3, [sp, #0]
 8000262:	9b00      	ldr	r3, [sp, #0]

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = LED_PIN[Led];
 8000264:	2320      	movs	r3, #32
 8000266:	9301      	str	r3, [sp, #4]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000268:	3b1f      	subs	r3, #31
 800026a:	9302      	str	r3, [sp, #8]
  gpioinitstruct.Pull = GPIO_NOPULL;
 800026c:	2300      	movs	r3, #0
 800026e:	9303      	str	r3, [sp, #12]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000270:	3303      	adds	r3, #3
 8000272:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpioinitstruct);
 8000274:	4b04      	ldr	r3, [pc, #16]	; (8000288 <BSP_LED_Init+0x40>)
 8000276:	0080      	lsls	r0, r0, #2
 8000278:	a901      	add	r1, sp, #4
 800027a:	58c0      	ldr	r0, [r0, r3]
 800027c:	f000 f934 	bl	80004e8 <HAL_GPIO_Init>
}
 8000280:	b006      	add	sp, #24
 8000282:	bd10      	pop	{r4, pc}
 8000284:	40021000 	.word	0x40021000
 8000288:	20000000 	.word	0x20000000

0800028c <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 800028c:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 800028e:	4b04      	ldr	r3, [pc, #16]	; (80002a0 <BSP_LED_On+0x14>)
 8000290:	0080      	lsls	r0, r0, #2
 8000292:	2201      	movs	r2, #1
 8000294:	2120      	movs	r1, #32
 8000296:	58c0      	ldr	r0, [r0, r3]
 8000298:	f000 fa58 	bl	800074c <HAL_GPIO_WritePin>
}
 800029c:	bd10      	pop	{r4, pc}
 800029e:	46c0      	nop			; (mov r8, r8)
 80002a0:	20000000 	.word	0x20000000

080002a4 <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80002a4:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 80002a6:	4b04      	ldr	r3, [pc, #16]	; (80002b8 <BSP_LED_Off+0x14>)
 80002a8:	0080      	lsls	r0, r0, #2
 80002aa:	2200      	movs	r2, #0
 80002ac:	2120      	movs	r1, #32
 80002ae:	58c0      	ldr	r0, [r0, r3]
 80002b0:	f000 fa4c 	bl	800074c <HAL_GPIO_WritePin>
}
 80002b4:	bd10      	pop	{r4, pc}
 80002b6:	46c0      	nop			; (mov r8, r8)
 80002b8:	20000000 	.word	0x20000000

080002bc <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80002bc:	b510      	push	{r4, lr}
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <BSP_LED_Toggle+0x10>)
 80002c0:	0080      	lsls	r0, r0, #2
 80002c2:	2120      	movs	r1, #32
 80002c4:	58c0      	ldr	r0, [r0, r3]
 80002c6:	f000 fa47 	bl	8000758 <HAL_GPIO_TogglePin>
}
 80002ca:	bd10      	pop	{r4, pc}
 80002cc:	20000000 	.word	0x20000000

080002d0 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 80002d0:	2101      	movs	r1, #1
 80002d2:	4b11      	ldr	r3, [pc, #68]	; (8000318 <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 80002d4:	4811      	ldr	r0, [pc, #68]	; (800031c <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 80002d6:	681a      	ldr	r2, [r3, #0]
 80002d8:	430a      	orrs	r2, r1
 80002da:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 80002dc:	685a      	ldr	r2, [r3, #4]
 80002de:	4002      	ands	r2, r0
 80002e0:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 80002e2:	681a      	ldr	r2, [r3, #0]
 80002e4:	480e      	ldr	r0, [pc, #56]	; (8000320 <SystemInit+0x50>)
 80002e6:	4002      	ands	r2, r0
 80002e8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80002ea:	681a      	ldr	r2, [r3, #0]
 80002ec:	480d      	ldr	r0, [pc, #52]	; (8000324 <SystemInit+0x54>)
 80002ee:	4002      	ands	r2, r0
 80002f0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80002f2:	685a      	ldr	r2, [r3, #4]
 80002f4:	480c      	ldr	r0, [pc, #48]	; (8000328 <SystemInit+0x58>)
 80002f6:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80002f8:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80002fa:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80002fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80002fe:	4382      	bics	r2, r0
 8000300:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined (STM32F072xB) || defined (STM32F078xx)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFCFE2CU;
 8000302:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000304:	4809      	ldr	r0, [pc, #36]	; (800032c <SystemInit+0x5c>)
 8000306:	4002      	ands	r2, r0
 8000308:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 800030a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800030c:	438a      	bics	r2, r1
 800030e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8000310:	2200      	movs	r2, #0
 8000312:	609a      	str	r2, [r3, #8]

}
 8000314:	4770      	bx	lr
 8000316:	46c0      	nop			; (mov r8, r8)
 8000318:	40021000 	.word	0x40021000
 800031c:	08ffb80c 	.word	0x08ffb80c
 8000320:	fef6ffff 	.word	0xfef6ffff
 8000324:	fffbffff 	.word	0xfffbffff
 8000328:	ffc0ffff 	.word	0xffc0ffff
 800032c:	fffcfe2c 	.word	0xfffcfe2c

08000330 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000330:	4770      	bx	lr
	...

08000334 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000334:	b570      	push	{r4, r5, r6, lr}
 8000336:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000338:	20fa      	movs	r0, #250	; 0xfa
 800033a:	4e0d      	ldr	r6, [pc, #52]	; (8000370 <HAL_InitTick+0x3c>)
 800033c:	0080      	lsls	r0, r0, #2
 800033e:	7831      	ldrb	r1, [r6, #0]
 8000340:	f7ff fef6 	bl	8000130 <__udivsi3>
 8000344:	4b0b      	ldr	r3, [pc, #44]	; (8000374 <HAL_InitTick+0x40>)
 8000346:	0001      	movs	r1, r0
 8000348:	6818      	ldr	r0, [r3, #0]
 800034a:	f7ff fef1 	bl	8000130 <__udivsi3>
 800034e:	f000 f88d 	bl	800046c <HAL_SYSTICK_Config>
 8000352:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8000354:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000356:	2c00      	cmp	r4, #0
 8000358:	d108      	bne.n	800036c <HAL_InitTick+0x38>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800035a:	2d03      	cmp	r5, #3
 800035c:	d806      	bhi.n	800036c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800035e:	3802      	subs	r0, #2
 8000360:	0022      	movs	r2, r4
 8000362:	0029      	movs	r1, r5
 8000364:	f000 f83c 	bl	80003e0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000368:	0020      	movs	r0, r4
 800036a:	6075      	str	r5, [r6, #4]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 800036c:	bd70      	pop	{r4, r5, r6, pc}
 800036e:	46c0      	nop			; (mov r8, r8)
 8000370:	2000000c 	.word	0x2000000c
 8000374:	20000008 	.word	0x20000008

08000378 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000378:	2310      	movs	r3, #16
 800037a:	4a06      	ldr	r2, [pc, #24]	; (8000394 <HAL_Init+0x1c>)
{
 800037c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800037e:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000380:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000382:	430b      	orrs	r3, r1
 8000384:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000386:	f7ff ffd5 	bl	8000334 <HAL_InitTick>
  HAL_MspInit();
 800038a:	f7ff ffd1 	bl	8000330 <HAL_MspInit>
}
 800038e:	2000      	movs	r0, #0
 8000390:	bd10      	pop	{r4, pc}
 8000392:	46c0      	nop			; (mov r8, r8)
 8000394:	40022000 	.word	0x40022000

08000398 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000398:	4a03      	ldr	r2, [pc, #12]	; (80003a8 <HAL_IncTick+0x10>)
 800039a:	4b04      	ldr	r3, [pc, #16]	; (80003ac <HAL_IncTick+0x14>)
 800039c:	6811      	ldr	r1, [r2, #0]
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	185b      	adds	r3, r3, r1
 80003a2:	6013      	str	r3, [r2, #0]
}
 80003a4:	4770      	bx	lr
 80003a6:	46c0      	nop			; (mov r8, r8)
 80003a8:	20000094 	.word	0x20000094
 80003ac:	2000000c 	.word	0x2000000c

080003b0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80003b0:	4b01      	ldr	r3, [pc, #4]	; (80003b8 <HAL_GetTick+0x8>)
 80003b2:	6818      	ldr	r0, [r3, #0]
}
 80003b4:	4770      	bx	lr
 80003b6:	46c0      	nop			; (mov r8, r8)
 80003b8:	20000094 	.word	0x20000094

080003bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80003bc:	b570      	push	{r4, r5, r6, lr}
 80003be:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80003c0:	f7ff fff6 	bl	80003b0 <HAL_GetTick>
 80003c4:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80003c6:	1c63      	adds	r3, r4, #1
 80003c8:	d002      	beq.n	80003d0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80003ca:	4b04      	ldr	r3, [pc, #16]	; (80003dc <HAL_Delay+0x20>)
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80003d0:	f7ff ffee 	bl	80003b0 <HAL_GetTick>
 80003d4:	1b40      	subs	r0, r0, r5
 80003d6:	42a0      	cmp	r0, r4
 80003d8:	d3fa      	bcc.n	80003d0 <HAL_Delay+0x14>
  {
  }
}
 80003da:	bd70      	pop	{r4, r5, r6, pc}
 80003dc:	2000000c 	.word	0x2000000c

080003e0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003e0:	b530      	push	{r4, r5, lr}
 80003e2:	25ff      	movs	r5, #255	; 0xff
 80003e4:	2403      	movs	r4, #3
 80003e6:	002a      	movs	r2, r5
 80003e8:	b2c3      	uxtb	r3, r0
 80003ea:	401c      	ands	r4, r3
 80003ec:	00e4      	lsls	r4, r4, #3
 80003ee:	40a2      	lsls	r2, r4
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	4029      	ands	r1, r5
 80003f4:	43d2      	mvns	r2, r2
 80003f6:	40a1      	lsls	r1, r4
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80003f8:	2800      	cmp	r0, #0
 80003fa:	db0a      	blt.n	8000412 <HAL_NVIC_SetPriority+0x32>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003fc:	24c0      	movs	r4, #192	; 0xc0
 80003fe:	4b0b      	ldr	r3, [pc, #44]	; (800042c <HAL_NVIC_SetPriority+0x4c>)
 8000400:	0880      	lsrs	r0, r0, #2
 8000402:	0080      	lsls	r0, r0, #2
 8000404:	18c0      	adds	r0, r0, r3
 8000406:	00a4      	lsls	r4, r4, #2
 8000408:	5903      	ldr	r3, [r0, r4]
 800040a:	401a      	ands	r2, r3
 800040c:	4311      	orrs	r1, r2
 800040e:	5101      	str	r1, [r0, r4]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000410:	bd30      	pop	{r4, r5, pc}
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000412:	200f      	movs	r0, #15
 8000414:	4003      	ands	r3, r0
 8000416:	3b08      	subs	r3, #8
 8000418:	4805      	ldr	r0, [pc, #20]	; (8000430 <HAL_NVIC_SetPriority+0x50>)
 800041a:	089b      	lsrs	r3, r3, #2
 800041c:	009b      	lsls	r3, r3, #2
 800041e:	181b      	adds	r3, r3, r0
 8000420:	69d8      	ldr	r0, [r3, #28]
 8000422:	4002      	ands	r2, r0
 8000424:	4311      	orrs	r1, r2
 8000426:	61d9      	str	r1, [r3, #28]
 8000428:	e7f2      	b.n	8000410 <HAL_NVIC_SetPriority+0x30>
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	e000e100 	.word	0xe000e100
 8000430:	e000ed00 	.word	0xe000ed00

08000434 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000434:	2800      	cmp	r0, #0
 8000436:	db05      	blt.n	8000444 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000438:	231f      	movs	r3, #31
 800043a:	4018      	ands	r0, r3
 800043c:	3b1e      	subs	r3, #30
 800043e:	4083      	lsls	r3, r0
 8000440:	4a01      	ldr	r2, [pc, #4]	; (8000448 <HAL_NVIC_EnableIRQ+0x14>)
 8000442:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000444:	4770      	bx	lr
 8000446:	46c0      	nop			; (mov r8, r8)
 8000448:	e000e100 	.word	0xe000e100

0800044c <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800044c:	2800      	cmp	r0, #0
 800044e:	db09      	blt.n	8000464 <HAL_NVIC_DisableIRQ+0x18>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000450:	231f      	movs	r3, #31
 8000452:	4018      	ands	r0, r3
 8000454:	3b1e      	subs	r3, #30
 8000456:	4083      	lsls	r3, r0
 8000458:	4a03      	ldr	r2, [pc, #12]	; (8000468 <HAL_NVIC_DisableIRQ+0x1c>)
 800045a:	67d3      	str	r3, [r2, #124]	; 0x7c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800045c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000460:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8000464:	4770      	bx	lr
 8000466:	46c0      	nop			; (mov r8, r8)
 8000468:	e000e104 	.word	0xe000e104

0800046c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800046c:	4a09      	ldr	r2, [pc, #36]	; (8000494 <HAL_SYSTICK_Config+0x28>)
 800046e:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000470:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000472:	4293      	cmp	r3, r2
 8000474:	d80d      	bhi.n	8000492 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000476:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000478:	4a07      	ldr	r2, [pc, #28]	; (8000498 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800047a:	4808      	ldr	r0, [pc, #32]	; (800049c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800047c:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800047e:	6a03      	ldr	r3, [r0, #32]
 8000480:	0609      	lsls	r1, r1, #24
 8000482:	021b      	lsls	r3, r3, #8
 8000484:	0a1b      	lsrs	r3, r3, #8
 8000486:	430b      	orrs	r3, r1
 8000488:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800048a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800048c:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800048e:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000490:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000492:	4770      	bx	lr
 8000494:	00ffffff 	.word	0x00ffffff
 8000498:	e000e010 	.word	0xe000e010
 800049c:	e000ed00 	.word	0xe000ed00

080004a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80004a0:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80004a2:	1c84      	adds	r4, r0, #2
 80004a4:	7fe3      	ldrb	r3, [r4, #31]
 80004a6:	2b02      	cmp	r3, #2
 80004a8:	d004      	beq.n	80004b4 <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80004aa:	2304      	movs	r3, #4
 80004ac:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 80004ae:	3b03      	subs	r3, #3
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 80004b0:	0018      	movs	r0, r3
 80004b2:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80004b4:	210e      	movs	r1, #14
 80004b6:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80004b8:	6c05      	ldr	r5, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80004ba:	681a      	ldr	r2, [r3, #0]
 80004bc:	438a      	bics	r2, r1
 80004be:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80004c0:	2201      	movs	r2, #1
 80004c2:	6819      	ldr	r1, [r3, #0]
 80004c4:	4391      	bics	r1, r2
 80004c6:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80004c8:	0011      	movs	r1, r2
 80004ca:	40a9      	lsls	r1, r5
 80004cc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80004ce:	6059      	str	r1, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80004d0:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 80004d2:	2400      	movs	r4, #0
 80004d4:	1883      	adds	r3, r0, r2
    if(hdma->XferAbortCallback != NULL)
 80004d6:	6b42      	ldr	r2, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 80004d8:	77dc      	strb	r4, [r3, #31]
  HAL_StatusTypeDef status = HAL_OK;
 80004da:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 80004dc:	42a2      	cmp	r2, r4
 80004de:	d0e7      	beq.n	80004b0 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 80004e0:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 80004e2:	0023      	movs	r3, r4
 80004e4:	e7e4      	b.n	80004b0 <HAL_DMA_Abort_IT+0x10>
	...

080004e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80004ea:	4a56      	ldr	r2, [pc, #344]	; (8000644 <HAL_GPIO_Init+0x15c>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80004ec:	680b      	ldr	r3, [r1, #0]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80004ee:	1882      	adds	r2, r0, r2
 80004f0:	1e54      	subs	r4, r2, #1
 80004f2:	41a2      	sbcs	r2, r4
{ 
 80004f4:	b089      	sub	sp, #36	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80004f6:	9303      	str	r3, [sp, #12]
  uint32_t position = 0x00u;
 80004f8:	2300      	movs	r3, #0
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80004fa:	3204      	adds	r2, #4
 80004fc:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80004fe:	9a03      	ldr	r2, [sp, #12]
 8000500:	40da      	lsrs	r2, r3
 8000502:	d101      	bne.n	8000508 <HAL_GPIO_Init+0x20>
      }
    }

    position++;
  } 
}
 8000504:	b009      	add	sp, #36	; 0x24
 8000506:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000508:	2201      	movs	r2, #1
 800050a:	409a      	lsls	r2, r3
 800050c:	4694      	mov	ip, r2
 800050e:	4664      	mov	r4, ip
 8000510:	9a03      	ldr	r2, [sp, #12]
 8000512:	4022      	ands	r2, r4
 8000514:	9202      	str	r2, [sp, #8]
    if (iocurrent != 0x00u)
 8000516:	d100      	bne.n	800051a <HAL_GPIO_Init+0x32>
 8000518:	e092      	b.n	8000640 <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800051a:	684a      	ldr	r2, [r1, #4]
 800051c:	9201      	str	r2, [sp, #4]
 800051e:	2210      	movs	r2, #16
 8000520:	9e01      	ldr	r6, [sp, #4]
 8000522:	4396      	bics	r6, r2
 8000524:	2e02      	cmp	r6, #2
 8000526:	d10d      	bne.n	8000544 <HAL_GPIO_Init+0x5c>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000528:	2407      	movs	r4, #7
 800052a:	270f      	movs	r7, #15
 800052c:	401c      	ands	r4, r3
 800052e:	00a4      	lsls	r4, r4, #2
 8000530:	40a7      	lsls	r7, r4
        temp = GPIOx->AFR[position >> 3u];
 8000532:	08da      	lsrs	r2, r3, #3
 8000534:	0092      	lsls	r2, r2, #2
 8000536:	1882      	adds	r2, r0, r2
 8000538:	6a15      	ldr	r5, [r2, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800053a:	43bd      	bics	r5, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800053c:	690f      	ldr	r7, [r1, #16]
 800053e:	40a7      	lsls	r7, r4
 8000540:	433d      	orrs	r5, r7
        GPIOx->AFR[position >> 3u] = temp;
 8000542:	6215      	str	r5, [r2, #32]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000544:	2203      	movs	r2, #3
 8000546:	0014      	movs	r4, r2
 8000548:	005d      	lsls	r5, r3, #1
 800054a:	40ac      	lsls	r4, r5
 800054c:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 800054e:	6807      	ldr	r7, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000550:	3e01      	subs	r6, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000552:	4027      	ands	r7, r4
 8000554:	9704      	str	r7, [sp, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000556:	9f01      	ldr	r7, [sp, #4]
 8000558:	403a      	ands	r2, r7
 800055a:	40aa      	lsls	r2, r5
 800055c:	9f04      	ldr	r7, [sp, #16]
 800055e:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;
 8000560:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000562:	2e01      	cmp	r6, #1
 8000564:	d80e      	bhi.n	8000584 <HAL_GPIO_Init+0x9c>
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000566:	68ca      	ldr	r2, [r1, #12]
        temp = GPIOx->OSPEEDR;
 8000568:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800056a:	40aa      	lsls	r2, r5
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800056c:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 800056e:	4332      	orrs	r2, r6
        GPIOx->OSPEEDR = temp;
 8000570:	6082      	str	r2, [r0, #8]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000572:	4662      	mov	r2, ip
        temp = GPIOx->OTYPER;
 8000574:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000576:	4396      	bics	r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000578:	9a01      	ldr	r2, [sp, #4]
 800057a:	06d2      	lsls	r2, r2, #27
 800057c:	0fd2      	lsrs	r2, r2, #31
 800057e:	409a      	lsls	r2, r3
 8000580:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 8000582:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8000584:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000586:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000588:	688a      	ldr	r2, [r1, #8]
 800058a:	40aa      	lsls	r2, r5
 800058c:	4314      	orrs	r4, r2
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800058e:	9a01      	ldr	r2, [sp, #4]
      GPIOx->PUPDR = temp;
 8000590:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000592:	00d2      	lsls	r2, r2, #3
 8000594:	d554      	bpl.n	8000640 <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000596:	2601      	movs	r6, #1
 8000598:	4a2b      	ldr	r2, [pc, #172]	; (8000648 <HAL_GPIO_Init+0x160>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800059a:	001d      	movs	r5, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800059c:	6994      	ldr	r4, [r2, #24]
 800059e:	4334      	orrs	r4, r6
 80005a0:	6194      	str	r4, [r2, #24]
 80005a2:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 80005a4:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005a6:	4032      	ands	r2, r6
 80005a8:	9207      	str	r2, [sp, #28]
 80005aa:	9a07      	ldr	r2, [sp, #28]
 80005ac:	4a27      	ldr	r2, [pc, #156]	; (800064c <HAL_GPIO_Init+0x164>)
 80005ae:	00a4      	lsls	r4, r4, #2
 80005b0:	18a4      	adds	r4, r4, r2
        temp = SYSCFG->EXTICR[position >> 2u];
 80005b2:	68a2      	ldr	r2, [r4, #8]
 80005b4:	4694      	mov	ip, r2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80005b6:	2203      	movs	r2, #3
 80005b8:	4015      	ands	r5, r2
 80005ba:	00ad      	lsls	r5, r5, #2
 80005bc:	320c      	adds	r2, #12
 80005be:	40aa      	lsls	r2, r5
 80005c0:	4667      	mov	r7, ip
 80005c2:	4397      	bics	r7, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80005c4:	2290      	movs	r2, #144	; 0x90
 80005c6:	05d2      	lsls	r2, r2, #23
 80005c8:	4694      	mov	ip, r2
 80005ca:	2200      	movs	r2, #0
 80005cc:	4560      	cmp	r0, ip
 80005ce:	d00d      	beq.n	80005ec <HAL_GPIO_Init+0x104>
 80005d0:	4a1f      	ldr	r2, [pc, #124]	; (8000650 <HAL_GPIO_Init+0x168>)
 80005d2:	4694      	mov	ip, r2
 80005d4:	0032      	movs	r2, r6
 80005d6:	4560      	cmp	r0, ip
 80005d8:	d008      	beq.n	80005ec <HAL_GPIO_Init+0x104>
 80005da:	4e1e      	ldr	r6, [pc, #120]	; (8000654 <HAL_GPIO_Init+0x16c>)
 80005dc:	1892      	adds	r2, r2, r2
 80005de:	42b0      	cmp	r0, r6
 80005e0:	d004      	beq.n	80005ec <HAL_GPIO_Init+0x104>
 80005e2:	4e1d      	ldr	r6, [pc, #116]	; (8000658 <HAL_GPIO_Init+0x170>)
 80005e4:	3201      	adds	r2, #1
 80005e6:	42b0      	cmp	r0, r6
 80005e8:	d000      	beq.n	80005ec <HAL_GPIO_Init+0x104>
 80005ea:	9a05      	ldr	r2, [sp, #20]
 80005ec:	40aa      	lsls	r2, r5
 80005ee:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 80005f0:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 80005f2:	4a1a      	ldr	r2, [pc, #104]	; (800065c <HAL_GPIO_Init+0x174>)
        temp &= ~(iocurrent);
 80005f4:	9c02      	ldr	r4, [sp, #8]
        temp = EXTI->IMR;
 80005f6:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 80005f8:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80005fa:	9f01      	ldr	r7, [sp, #4]
        temp &= ~(iocurrent);
 80005fc:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 80005fe:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000600:	03ff      	lsls	r7, r7, #15
 8000602:	d401      	bmi.n	8000608 <HAL_GPIO_Init+0x120>
        temp &= ~(iocurrent);
 8000604:	0035      	movs	r5, r6
 8000606:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 8000608:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 800060a:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 800060c:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800060e:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 8000610:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000612:	03bf      	lsls	r7, r7, #14
 8000614:	d401      	bmi.n	800061a <HAL_GPIO_Init+0x132>
        temp &= ~(iocurrent);
 8000616:	0035      	movs	r5, r6
 8000618:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 800061a:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 800061c:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 800061e:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000620:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 8000622:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000624:	02ff      	lsls	r7, r7, #11
 8000626:	d401      	bmi.n	800062c <HAL_GPIO_Init+0x144>
        temp &= ~(iocurrent);
 8000628:	0035      	movs	r5, r6
 800062a:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 800062c:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 800062e:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8000630:	9e02      	ldr	r6, [sp, #8]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000632:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 8000634:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000636:	02bf      	lsls	r7, r7, #10
 8000638:	d401      	bmi.n	800063e <HAL_GPIO_Init+0x156>
        temp &= ~(iocurrent);
 800063a:	4025      	ands	r5, r4
 800063c:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 800063e:	60d6      	str	r6, [r2, #12]
    position++;
 8000640:	3301      	adds	r3, #1
 8000642:	e75c      	b.n	80004fe <HAL_GPIO_Init+0x16>
 8000644:	b7fff000 	.word	0xb7fff000
 8000648:	40021000 	.word	0x40021000
 800064c:	40010000 	.word	0x40010000
 8000650:	48000400 	.word	0x48000400
 8000654:	48000800 	.word	0x48000800
 8000658:	48000c00 	.word	0x48000c00
 800065c:	40010400 	.word	0x40010400

08000660 <HAL_GPIO_DeInit>:
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8000660:	4a34      	ldr	r2, [pc, #208]	; (8000734 <HAL_GPIO_DeInit+0xd4>)
{
 8000662:	b5f0      	push	{r4, r5, r6, r7, lr}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8000664:	1882      	adds	r2, r0, r2
 8000666:	1e54      	subs	r4, r2, #1
 8000668:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00u;
 800066a:	2300      	movs	r3, #0
{
 800066c:	b085      	sub	sp, #20
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800066e:	3204      	adds	r2, #4
 8000670:	9203      	str	r2, [sp, #12]
  while ((GPIO_Pin >> position) != 0x00u)
 8000672:	000a      	movs	r2, r1
 8000674:	40da      	lsrs	r2, r3
 8000676:	d101      	bne.n	800067c <HAL_GPIO_DeInit+0x1c>
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
    }

    position++;
  }
}
 8000678:	b005      	add	sp, #20
 800067a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 800067c:	2201      	movs	r2, #1
 800067e:	409a      	lsls	r2, r3
 8000680:	0016      	movs	r6, r2
 8000682:	9200      	str	r2, [sp, #0]
 8000684:	400e      	ands	r6, r1
    if (iocurrent != 0x00u)
 8000686:	d053      	beq.n	8000730 <HAL_GPIO_DeInit+0xd0>
 8000688:	4c2b      	ldr	r4, [pc, #172]	; (8000738 <HAL_GPIO_DeInit+0xd8>)
      tmp = SYSCFG->EXTICR[position >> 2u];
 800068a:	089a      	lsrs	r2, r3, #2
 800068c:	0092      	lsls	r2, r2, #2
 800068e:	1912      	adds	r2, r2, r4
 8000690:	6894      	ldr	r4, [r2, #8]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8000692:	2503      	movs	r5, #3
      tmp = SYSCFG->EXTICR[position >> 2u];
 8000694:	0027      	movs	r7, r4
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8000696:	240f      	movs	r4, #15
 8000698:	401d      	ands	r5, r3
 800069a:	00ad      	lsls	r5, r5, #2
 800069c:	40ac      	lsls	r4, r5
 800069e:	9401      	str	r4, [sp, #4]
 80006a0:	403c      	ands	r4, r7
 80006a2:	9402      	str	r4, [sp, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80006a4:	2490      	movs	r4, #144	; 0x90
 80006a6:	05e4      	lsls	r4, r4, #23
 80006a8:	46a4      	mov	ip, r4
 80006aa:	2400      	movs	r4, #0
 80006ac:	4560      	cmp	r0, ip
 80006ae:	d00d      	beq.n	80006cc <HAL_GPIO_DeInit+0x6c>
 80006b0:	4c22      	ldr	r4, [pc, #136]	; (800073c <HAL_GPIO_DeInit+0xdc>)
 80006b2:	46a4      	mov	ip, r4
 80006b4:	2401      	movs	r4, #1
 80006b6:	4560      	cmp	r0, ip
 80006b8:	d008      	beq.n	80006cc <HAL_GPIO_DeInit+0x6c>
 80006ba:	4f21      	ldr	r7, [pc, #132]	; (8000740 <HAL_GPIO_DeInit+0xe0>)
 80006bc:	1924      	adds	r4, r4, r4
 80006be:	42b8      	cmp	r0, r7
 80006c0:	d004      	beq.n	80006cc <HAL_GPIO_DeInit+0x6c>
 80006c2:	4f20      	ldr	r7, [pc, #128]	; (8000744 <HAL_GPIO_DeInit+0xe4>)
 80006c4:	3401      	adds	r4, #1
 80006c6:	42b8      	cmp	r0, r7
 80006c8:	d000      	beq.n	80006cc <HAL_GPIO_DeInit+0x6c>
 80006ca:	9c03      	ldr	r4, [sp, #12]
 80006cc:	40ac      	lsls	r4, r5
 80006ce:	9d02      	ldr	r5, [sp, #8]
 80006d0:	42ac      	cmp	r4, r5
 80006d2:	d111      	bne.n	80006f8 <HAL_GPIO_DeInit+0x98>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80006d4:	43f6      	mvns	r6, r6
 80006d6:	4c1c      	ldr	r4, [pc, #112]	; (8000748 <HAL_GPIO_DeInit+0xe8>)
 80006d8:	6825      	ldr	r5, [r4, #0]
 80006da:	4035      	ands	r5, r6
 80006dc:	6025      	str	r5, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80006de:	6865      	ldr	r5, [r4, #4]
 80006e0:	4035      	ands	r5, r6
 80006e2:	6065      	str	r5, [r4, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80006e4:	68a5      	ldr	r5, [r4, #8]
 80006e6:	4035      	ands	r5, r6
 80006e8:	60a5      	str	r5, [r4, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80006ea:	68e5      	ldr	r5, [r4, #12]
 80006ec:	402e      	ands	r6, r5
 80006ee:	60e6      	str	r6, [r4, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80006f0:	6894      	ldr	r4, [r2, #8]
 80006f2:	9d01      	ldr	r5, [sp, #4]
 80006f4:	43ac      	bics	r4, r5
 80006f6:	6094      	str	r4, [r2, #8]
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80006f8:	2203      	movs	r2, #3
 80006fa:	005d      	lsls	r5, r3, #1
 80006fc:	40aa      	lsls	r2, r5
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 80006fe:	2507      	movs	r5, #7
 8000700:	270f      	movs	r7, #15
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000702:	43d2      	mvns	r2, r2
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8000704:	401d      	ands	r5, r3
 8000706:	00ad      	lsls	r5, r5, #2
 8000708:	40af      	lsls	r7, r5
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800070a:	6804      	ldr	r4, [r0, #0]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800070c:	9d00      	ldr	r5, [sp, #0]
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800070e:	4014      	ands	r4, r2
 8000710:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8000712:	08dc      	lsrs	r4, r3, #3
 8000714:	00a4      	lsls	r4, r4, #2
 8000716:	1904      	adds	r4, r0, r4
 8000718:	6a26      	ldr	r6, [r4, #32]
 800071a:	43be      	bics	r6, r7
 800071c:	6226      	str	r6, [r4, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800071e:	6884      	ldr	r4, [r0, #8]
 8000720:	4014      	ands	r4, r2
 8000722:	6084      	str	r4, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000724:	6844      	ldr	r4, [r0, #4]
 8000726:	43ac      	bics	r4, r5
 8000728:	6044      	str	r4, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800072a:	68c4      	ldr	r4, [r0, #12]
 800072c:	4022      	ands	r2, r4
 800072e:	60c2      	str	r2, [r0, #12]
    position++;
 8000730:	3301      	adds	r3, #1
 8000732:	e79e      	b.n	8000672 <HAL_GPIO_DeInit+0x12>
 8000734:	b7fff000 	.word	0xb7fff000
 8000738:	40010000 	.word	0x40010000
 800073c:	48000400 	.word	0x48000400
 8000740:	48000800 	.word	0x48000800
 8000744:	48000c00 	.word	0x48000c00
 8000748:	40010400 	.word	0x40010400

0800074c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800074c:	2a00      	cmp	r2, #0
 800074e:	d001      	beq.n	8000754 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000750:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000752:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000754:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000756:	e7fc      	b.n	8000752 <HAL_GPIO_WritePin+0x6>

08000758 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8000758:	6943      	ldr	r3, [r0, #20]
 800075a:	4219      	tst	r1, r3
 800075c:	d000      	beq.n	8000760 <HAL_GPIO_TogglePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800075e:	0409      	lsls	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000760:	6181      	str	r1, [r0, #24]
  }
}
 8000762:	4770      	bx	lr

08000764 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000764:	4b04      	ldr	r3, [pc, #16]	; (8000778 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8000766:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000768:	695a      	ldr	r2, [r3, #20]
 800076a:	4210      	tst	r0, r2
 800076c:	d002      	beq.n	8000774 <HAL_GPIO_EXTI_IRQHandler+0x10>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800076e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000770:	f001 f816 	bl	80017a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8000774:	bd10      	pop	{r4, pc}
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	40010400 	.word	0x40010400

0800077c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800077c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800077e:	0004      	movs	r4, r0
 8000780:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000782:	2800      	cmp	r0, #0
 8000784:	d102      	bne.n	800078c <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000786:	2001      	movs	r0, #1
      }
    }
  }

  return HAL_OK;
}
 8000788:	b005      	add	sp, #20
 800078a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800078c:	6803      	ldr	r3, [r0, #0]
 800078e:	07db      	lsls	r3, r3, #31
 8000790:	d433      	bmi.n	80007fa <HAL_RCC_OscConfig+0x7e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000792:	6823      	ldr	r3, [r4, #0]
 8000794:	079b      	lsls	r3, r3, #30
 8000796:	d500      	bpl.n	800079a <HAL_RCC_OscConfig+0x1e>
 8000798:	e087      	b.n	80008aa <HAL_RCC_OscConfig+0x12e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800079a:	6823      	ldr	r3, [r4, #0]
 800079c:	071b      	lsls	r3, r3, #28
 800079e:	d500      	bpl.n	80007a2 <HAL_RCC_OscConfig+0x26>
 80007a0:	e0c8      	b.n	8000934 <HAL_RCC_OscConfig+0x1b8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80007a2:	6823      	ldr	r3, [r4, #0]
 80007a4:	075b      	lsls	r3, r3, #29
 80007a6:	d500      	bpl.n	80007aa <HAL_RCC_OscConfig+0x2e>
 80007a8:	e0eb      	b.n	8000982 <HAL_RCC_OscConfig+0x206>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80007aa:	6823      	ldr	r3, [r4, #0]
 80007ac:	06db      	lsls	r3, r3, #27
 80007ae:	d51a      	bpl.n	80007e6 <HAL_RCC_OscConfig+0x6a>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80007b0:	6962      	ldr	r2, [r4, #20]
 80007b2:	4dbc      	ldr	r5, [pc, #752]	; (8000aa4 <HAL_RCC_OscConfig+0x328>)
 80007b4:	2304      	movs	r3, #4
 80007b6:	2a01      	cmp	r2, #1
 80007b8:	d000      	beq.n	80007bc <HAL_RCC_OscConfig+0x40>
 80007ba:	e157      	b.n	8000a6c <HAL_RCC_OscConfig+0x2f0>
      __HAL_RCC_HSI14ADC_DISABLE();
 80007bc:	6b69      	ldr	r1, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80007be:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80007c0:	430b      	orrs	r3, r1
 80007c2:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80007c4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80007c6:	431a      	orrs	r2, r3
 80007c8:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80007ca:	f7ff fdf1 	bl	80003b0 <HAL_GetTick>
 80007ce:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80007d0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80007d2:	4233      	tst	r3, r6
 80007d4:	d100      	bne.n	80007d8 <HAL_RCC_OscConfig+0x5c>
 80007d6:	e142      	b.n	8000a5e <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80007d8:	21f8      	movs	r1, #248	; 0xf8
 80007da:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80007dc:	69a3      	ldr	r3, [r4, #24]
 80007de:	438a      	bics	r2, r1
 80007e0:	00db      	lsls	r3, r3, #3
 80007e2:	4313      	orrs	r3, r2
 80007e4:	636b      	str	r3, [r5, #52]	; 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80007e6:	6823      	ldr	r3, [r4, #0]
 80007e8:	069b      	lsls	r3, r3, #26
 80007ea:	d500      	bpl.n	80007ee <HAL_RCC_OscConfig+0x72>
 80007ec:	e166      	b.n	8000abc <HAL_RCC_OscConfig+0x340>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80007ee:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80007f0:	2a00      	cmp	r2, #0
 80007f2:	d000      	beq.n	80007f6 <HAL_RCC_OscConfig+0x7a>
 80007f4:	e1a3      	b.n	8000b3e <HAL_RCC_OscConfig+0x3c2>
  return HAL_OK;
 80007f6:	2000      	movs	r0, #0
 80007f8:	e7c6      	b.n	8000788 <HAL_RCC_OscConfig+0xc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80007fa:	210c      	movs	r1, #12
 80007fc:	4da9      	ldr	r5, [pc, #676]	; (8000aa4 <HAL_RCC_OscConfig+0x328>)
 80007fe:	686a      	ldr	r2, [r5, #4]
 8000800:	400a      	ands	r2, r1
 8000802:	2a04      	cmp	r2, #4
 8000804:	d00b      	beq.n	800081e <HAL_RCC_OscConfig+0xa2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000806:	686b      	ldr	r3, [r5, #4]
 8000808:	400b      	ands	r3, r1
 800080a:	2b08      	cmp	r3, #8
 800080c:	d10e      	bne.n	800082c <HAL_RCC_OscConfig+0xb0>
 800080e:	22c0      	movs	r2, #192	; 0xc0
 8000810:	686b      	ldr	r3, [r5, #4]
 8000812:	0252      	lsls	r2, r2, #9
 8000814:	4013      	ands	r3, r2
 8000816:	2280      	movs	r2, #128	; 0x80
 8000818:	0252      	lsls	r2, r2, #9
 800081a:	4293      	cmp	r3, r2
 800081c:	d106      	bne.n	800082c <HAL_RCC_OscConfig+0xb0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800081e:	682b      	ldr	r3, [r5, #0]
 8000820:	039b      	lsls	r3, r3, #14
 8000822:	d5b6      	bpl.n	8000792 <HAL_RCC_OscConfig+0x16>
 8000824:	6863      	ldr	r3, [r4, #4]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d1b3      	bne.n	8000792 <HAL_RCC_OscConfig+0x16>
 800082a:	e7ac      	b.n	8000786 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800082c:	6863      	ldr	r3, [r4, #4]
 800082e:	2b01      	cmp	r3, #1
 8000830:	d113      	bne.n	800085a <HAL_RCC_OscConfig+0xde>
 8000832:	2380      	movs	r3, #128	; 0x80
 8000834:	682a      	ldr	r2, [r5, #0]
 8000836:	025b      	lsls	r3, r3, #9
 8000838:	4313      	orrs	r3, r2
 800083a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800083c:	f7ff fdb8 	bl	80003b0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000840:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000842:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000844:	02b6      	lsls	r6, r6, #10
 8000846:	682b      	ldr	r3, [r5, #0]
 8000848:	4233      	tst	r3, r6
 800084a:	d1a2      	bne.n	8000792 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800084c:	f7ff fdb0 	bl	80003b0 <HAL_GetTick>
 8000850:	1bc0      	subs	r0, r0, r7
 8000852:	2864      	cmp	r0, #100	; 0x64
 8000854:	d9f7      	bls.n	8000846 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8000856:	2003      	movs	r0, #3
 8000858:	e796      	b.n	8000788 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800085a:	2b00      	cmp	r3, #0
 800085c:	d115      	bne.n	800088a <HAL_RCC_OscConfig+0x10e>
 800085e:	682b      	ldr	r3, [r5, #0]
 8000860:	4a91      	ldr	r2, [pc, #580]	; (8000aa8 <HAL_RCC_OscConfig+0x32c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000862:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000864:	4013      	ands	r3, r2
 8000866:	602b      	str	r3, [r5, #0]
 8000868:	682b      	ldr	r3, [r5, #0]
 800086a:	4a90      	ldr	r2, [pc, #576]	; (8000aac <HAL_RCC_OscConfig+0x330>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800086c:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800086e:	4013      	ands	r3, r2
 8000870:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000872:	f7ff fd9d 	bl	80003b0 <HAL_GetTick>
 8000876:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000878:	682b      	ldr	r3, [r5, #0]
 800087a:	4233      	tst	r3, r6
 800087c:	d089      	beq.n	8000792 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800087e:	f7ff fd97 	bl	80003b0 <HAL_GetTick>
 8000882:	1bc0      	subs	r0, r0, r7
 8000884:	2864      	cmp	r0, #100	; 0x64
 8000886:	d9f7      	bls.n	8000878 <HAL_RCC_OscConfig+0xfc>
 8000888:	e7e5      	b.n	8000856 <HAL_RCC_OscConfig+0xda>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800088a:	2b05      	cmp	r3, #5
 800088c:	d105      	bne.n	800089a <HAL_RCC_OscConfig+0x11e>
 800088e:	2380      	movs	r3, #128	; 0x80
 8000890:	682a      	ldr	r2, [r5, #0]
 8000892:	02db      	lsls	r3, r3, #11
 8000894:	4313      	orrs	r3, r2
 8000896:	602b      	str	r3, [r5, #0]
 8000898:	e7cb      	b.n	8000832 <HAL_RCC_OscConfig+0xb6>
 800089a:	682b      	ldr	r3, [r5, #0]
 800089c:	4a82      	ldr	r2, [pc, #520]	; (8000aa8 <HAL_RCC_OscConfig+0x32c>)
 800089e:	4013      	ands	r3, r2
 80008a0:	602b      	str	r3, [r5, #0]
 80008a2:	682b      	ldr	r3, [r5, #0]
 80008a4:	4a81      	ldr	r2, [pc, #516]	; (8000aac <HAL_RCC_OscConfig+0x330>)
 80008a6:	4013      	ands	r3, r2
 80008a8:	e7c7      	b.n	800083a <HAL_RCC_OscConfig+0xbe>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80008aa:	220c      	movs	r2, #12
 80008ac:	4d7d      	ldr	r5, [pc, #500]	; (8000aa4 <HAL_RCC_OscConfig+0x328>)
 80008ae:	686b      	ldr	r3, [r5, #4]
 80008b0:	4213      	tst	r3, r2
 80008b2:	d00b      	beq.n	80008cc <HAL_RCC_OscConfig+0x150>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80008b4:	686b      	ldr	r3, [r5, #4]
 80008b6:	4013      	ands	r3, r2
 80008b8:	2b08      	cmp	r3, #8
 80008ba:	d116      	bne.n	80008ea <HAL_RCC_OscConfig+0x16e>
 80008bc:	22c0      	movs	r2, #192	; 0xc0
 80008be:	686b      	ldr	r3, [r5, #4]
 80008c0:	0252      	lsls	r2, r2, #9
 80008c2:	4013      	ands	r3, r2
 80008c4:	2280      	movs	r2, #128	; 0x80
 80008c6:	0212      	lsls	r2, r2, #8
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d10e      	bne.n	80008ea <HAL_RCC_OscConfig+0x16e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008cc:	682b      	ldr	r3, [r5, #0]
 80008ce:	079b      	lsls	r3, r3, #30
 80008d0:	d503      	bpl.n	80008da <HAL_RCC_OscConfig+0x15e>
 80008d2:	68e3      	ldr	r3, [r4, #12]
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d000      	beq.n	80008da <HAL_RCC_OscConfig+0x15e>
 80008d8:	e755      	b.n	8000786 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008da:	21f8      	movs	r1, #248	; 0xf8
 80008dc:	682a      	ldr	r2, [r5, #0]
 80008de:	6923      	ldr	r3, [r4, #16]
 80008e0:	438a      	bics	r2, r1
 80008e2:	00db      	lsls	r3, r3, #3
 80008e4:	4313      	orrs	r3, r2
 80008e6:	602b      	str	r3, [r5, #0]
 80008e8:	e757      	b.n	800079a <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80008ea:	68e2      	ldr	r2, [r4, #12]
 80008ec:	2301      	movs	r3, #1
 80008ee:	2a00      	cmp	r2, #0
 80008f0:	d00f      	beq.n	8000912 <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_HSI_ENABLE();
 80008f2:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008f4:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 80008f6:	4313      	orrs	r3, r2
 80008f8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80008fa:	f7ff fd59 	bl	80003b0 <HAL_GetTick>
 80008fe:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000900:	682b      	ldr	r3, [r5, #0]
 8000902:	4233      	tst	r3, r6
 8000904:	d1e9      	bne.n	80008da <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000906:	f7ff fd53 	bl	80003b0 <HAL_GetTick>
 800090a:	1bc0      	subs	r0, r0, r7
 800090c:	2802      	cmp	r0, #2
 800090e:	d9f7      	bls.n	8000900 <HAL_RCC_OscConfig+0x184>
 8000910:	e7a1      	b.n	8000856 <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_HSI_DISABLE();
 8000912:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000914:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8000916:	439a      	bics	r2, r3
 8000918:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 800091a:	f7ff fd49 	bl	80003b0 <HAL_GetTick>
 800091e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000920:	682b      	ldr	r3, [r5, #0]
 8000922:	4233      	tst	r3, r6
 8000924:	d100      	bne.n	8000928 <HAL_RCC_OscConfig+0x1ac>
 8000926:	e738      	b.n	800079a <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000928:	f7ff fd42 	bl	80003b0 <HAL_GetTick>
 800092c:	1bc0      	subs	r0, r0, r7
 800092e:	2802      	cmp	r0, #2
 8000930:	d9f6      	bls.n	8000920 <HAL_RCC_OscConfig+0x1a4>
 8000932:	e790      	b.n	8000856 <HAL_RCC_OscConfig+0xda>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000934:	69e2      	ldr	r2, [r4, #28]
 8000936:	2301      	movs	r3, #1
 8000938:	4d5a      	ldr	r5, [pc, #360]	; (8000aa4 <HAL_RCC_OscConfig+0x328>)
 800093a:	2a00      	cmp	r2, #0
 800093c:	d010      	beq.n	8000960 <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_LSI_ENABLE();
 800093e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000940:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8000942:	4313      	orrs	r3, r2
 8000944:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000946:	f7ff fd33 	bl	80003b0 <HAL_GetTick>
 800094a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800094c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800094e:	4233      	tst	r3, r6
 8000950:	d000      	beq.n	8000954 <HAL_RCC_OscConfig+0x1d8>
 8000952:	e726      	b.n	80007a2 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000954:	f7ff fd2c 	bl	80003b0 <HAL_GetTick>
 8000958:	1bc0      	subs	r0, r0, r7
 800095a:	2802      	cmp	r0, #2
 800095c:	d9f6      	bls.n	800094c <HAL_RCC_OscConfig+0x1d0>
 800095e:	e77a      	b.n	8000856 <HAL_RCC_OscConfig+0xda>
      __HAL_RCC_LSI_DISABLE();
 8000960:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000962:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8000964:	439a      	bics	r2, r3
 8000966:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000968:	f7ff fd22 	bl	80003b0 <HAL_GetTick>
 800096c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800096e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000970:	4233      	tst	r3, r6
 8000972:	d100      	bne.n	8000976 <HAL_RCC_OscConfig+0x1fa>
 8000974:	e715      	b.n	80007a2 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000976:	f7ff fd1b 	bl	80003b0 <HAL_GetTick>
 800097a:	1bc0      	subs	r0, r0, r7
 800097c:	2802      	cmp	r0, #2
 800097e:	d9f6      	bls.n	800096e <HAL_RCC_OscConfig+0x1f2>
 8000980:	e769      	b.n	8000856 <HAL_RCC_OscConfig+0xda>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000982:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000984:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000986:	4d47      	ldr	r5, [pc, #284]	; (8000aa4 <HAL_RCC_OscConfig+0x328>)
 8000988:	0552      	lsls	r2, r2, #21
 800098a:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 800098c:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800098e:	4213      	tst	r3, r2
 8000990:	d108      	bne.n	80009a4 <HAL_RCC_OscConfig+0x228>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000992:	69eb      	ldr	r3, [r5, #28]
 8000994:	4313      	orrs	r3, r2
 8000996:	61eb      	str	r3, [r5, #28]
 8000998:	69eb      	ldr	r3, [r5, #28]
 800099a:	4013      	ands	r3, r2
 800099c:	9303      	str	r3, [sp, #12]
 800099e:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80009a0:	2301      	movs	r3, #1
 80009a2:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009a4:	2780      	movs	r7, #128	; 0x80
 80009a6:	4e42      	ldr	r6, [pc, #264]	; (8000ab0 <HAL_RCC_OscConfig+0x334>)
 80009a8:	007f      	lsls	r7, r7, #1
 80009aa:	6833      	ldr	r3, [r6, #0]
 80009ac:	423b      	tst	r3, r7
 80009ae:	d006      	beq.n	80009be <HAL_RCC_OscConfig+0x242>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009b0:	68a3      	ldr	r3, [r4, #8]
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d113      	bne.n	80009de <HAL_RCC_OscConfig+0x262>
 80009b6:	6a2a      	ldr	r2, [r5, #32]
 80009b8:	4313      	orrs	r3, r2
 80009ba:	622b      	str	r3, [r5, #32]
 80009bc:	e030      	b.n	8000a20 <HAL_RCC_OscConfig+0x2a4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80009be:	6833      	ldr	r3, [r6, #0]
 80009c0:	433b      	orrs	r3, r7
 80009c2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80009c4:	f7ff fcf4 	bl	80003b0 <HAL_GetTick>
 80009c8:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009ca:	6833      	ldr	r3, [r6, #0]
 80009cc:	423b      	tst	r3, r7
 80009ce:	d1ef      	bne.n	80009b0 <HAL_RCC_OscConfig+0x234>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80009d0:	f7ff fcee 	bl	80003b0 <HAL_GetTick>
 80009d4:	9b01      	ldr	r3, [sp, #4]
 80009d6:	1ac0      	subs	r0, r0, r3
 80009d8:	2864      	cmp	r0, #100	; 0x64
 80009da:	d9f6      	bls.n	80009ca <HAL_RCC_OscConfig+0x24e>
 80009dc:	e73b      	b.n	8000856 <HAL_RCC_OscConfig+0xda>
 80009de:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d114      	bne.n	8000a0e <HAL_RCC_OscConfig+0x292>
 80009e4:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80009e6:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009e8:	4393      	bics	r3, r2
 80009ea:	622b      	str	r3, [r5, #32]
 80009ec:	6a2b      	ldr	r3, [r5, #32]
 80009ee:	3203      	adds	r2, #3
 80009f0:	4393      	bics	r3, r2
 80009f2:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 80009f4:	f7ff fcdc 	bl	80003b0 <HAL_GetTick>
 80009f8:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80009fa:	6a2b      	ldr	r3, [r5, #32]
 80009fc:	423b      	tst	r3, r7
 80009fe:	d025      	beq.n	8000a4c <HAL_RCC_OscConfig+0x2d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a00:	f7ff fcd6 	bl	80003b0 <HAL_GetTick>
 8000a04:	4b2b      	ldr	r3, [pc, #172]	; (8000ab4 <HAL_RCC_OscConfig+0x338>)
 8000a06:	1b80      	subs	r0, r0, r6
 8000a08:	4298      	cmp	r0, r3
 8000a0a:	d9f6      	bls.n	80009fa <HAL_RCC_OscConfig+0x27e>
 8000a0c:	e723      	b.n	8000856 <HAL_RCC_OscConfig+0xda>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a0e:	2b05      	cmp	r3, #5
 8000a10:	d10b      	bne.n	8000a2a <HAL_RCC_OscConfig+0x2ae>
 8000a12:	6a29      	ldr	r1, [r5, #32]
 8000a14:	3b01      	subs	r3, #1
 8000a16:	430b      	orrs	r3, r1
 8000a18:	622b      	str	r3, [r5, #32]
 8000a1a:	6a2b      	ldr	r3, [r5, #32]
 8000a1c:	431a      	orrs	r2, r3
 8000a1e:	622a      	str	r2, [r5, #32]
      tickstart = HAL_GetTick();
 8000a20:	f7ff fcc6 	bl	80003b0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a24:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8000a26:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a28:	e00d      	b.n	8000a46 <HAL_RCC_OscConfig+0x2ca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a2a:	6a2b      	ldr	r3, [r5, #32]
 8000a2c:	4393      	bics	r3, r2
 8000a2e:	2204      	movs	r2, #4
 8000a30:	622b      	str	r3, [r5, #32]
 8000a32:	6a2b      	ldr	r3, [r5, #32]
 8000a34:	4393      	bics	r3, r2
 8000a36:	e7c0      	b.n	80009ba <HAL_RCC_OscConfig+0x23e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a38:	f7ff fcba 	bl	80003b0 <HAL_GetTick>
 8000a3c:	4b1d      	ldr	r3, [pc, #116]	; (8000ab4 <HAL_RCC_OscConfig+0x338>)
 8000a3e:	1b80      	subs	r0, r0, r6
 8000a40:	4298      	cmp	r0, r3
 8000a42:	d900      	bls.n	8000a46 <HAL_RCC_OscConfig+0x2ca>
 8000a44:	e707      	b.n	8000856 <HAL_RCC_OscConfig+0xda>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a46:	6a2b      	ldr	r3, [r5, #32]
 8000a48:	423b      	tst	r3, r7
 8000a4a:	d0f5      	beq.n	8000a38 <HAL_RCC_OscConfig+0x2bc>
    if(pwrclkchanged == SET)
 8000a4c:	9b00      	ldr	r3, [sp, #0]
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d000      	beq.n	8000a54 <HAL_RCC_OscConfig+0x2d8>
 8000a52:	e6aa      	b.n	80007aa <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000a54:	69eb      	ldr	r3, [r5, #28]
 8000a56:	4a18      	ldr	r2, [pc, #96]	; (8000ab8 <HAL_RCC_OscConfig+0x33c>)
 8000a58:	4013      	ands	r3, r2
 8000a5a:	61eb      	str	r3, [r5, #28]
 8000a5c:	e6a5      	b.n	80007aa <HAL_RCC_OscConfig+0x2e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000a5e:	f7ff fca7 	bl	80003b0 <HAL_GetTick>
 8000a62:	1bc0      	subs	r0, r0, r7
 8000a64:	2802      	cmp	r0, #2
 8000a66:	d800      	bhi.n	8000a6a <HAL_RCC_OscConfig+0x2ee>
 8000a68:	e6b2      	b.n	80007d0 <HAL_RCC_OscConfig+0x54>
 8000a6a:	e6f4      	b.n	8000856 <HAL_RCC_OscConfig+0xda>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000a6c:	3205      	adds	r2, #5
 8000a6e:	d103      	bne.n	8000a78 <HAL_RCC_OscConfig+0x2fc>
      __HAL_RCC_HSI14ADC_ENABLE();
 8000a70:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000a72:	439a      	bics	r2, r3
 8000a74:	636a      	str	r2, [r5, #52]	; 0x34
 8000a76:	e6af      	b.n	80007d8 <HAL_RCC_OscConfig+0x5c>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000a78:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000a7a:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000a7c:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8000a7e:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8000a80:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000a82:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000a84:	4393      	bics	r3, r2
 8000a86:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000a88:	f7ff fc92 	bl	80003b0 <HAL_GetTick>
 8000a8c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000a8e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000a90:	4233      	tst	r3, r6
 8000a92:	d100      	bne.n	8000a96 <HAL_RCC_OscConfig+0x31a>
 8000a94:	e6a7      	b.n	80007e6 <HAL_RCC_OscConfig+0x6a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000a96:	f7ff fc8b 	bl	80003b0 <HAL_GetTick>
 8000a9a:	1bc0      	subs	r0, r0, r7
 8000a9c:	2802      	cmp	r0, #2
 8000a9e:	d9f6      	bls.n	8000a8e <HAL_RCC_OscConfig+0x312>
 8000aa0:	e6d9      	b.n	8000856 <HAL_RCC_OscConfig+0xda>
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	fffeffff 	.word	0xfffeffff
 8000aac:	fffbffff 	.word	0xfffbffff
 8000ab0:	40007000 	.word	0x40007000
 8000ab4:	00001388 	.word	0x00001388
 8000ab8:	efffffff 	.word	0xefffffff
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000abc:	210c      	movs	r1, #12
 8000abe:	4d53      	ldr	r5, [pc, #332]	; (8000c0c <HAL_RCC_OscConfig+0x490>)
 8000ac0:	686a      	ldr	r2, [r5, #4]
 8000ac2:	400a      	ands	r2, r1
 8000ac4:	428a      	cmp	r2, r1
 8000ac6:	d009      	beq.n	8000adc <HAL_RCC_OscConfig+0x360>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8000ac8:	686b      	ldr	r3, [r5, #4]
 8000aca:	400b      	ands	r3, r1
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000acc:	2b08      	cmp	r3, #8
 8000ace:	d10e      	bne.n	8000aee <HAL_RCC_OscConfig+0x372>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8000ad0:	22c0      	movs	r2, #192	; 0xc0
 8000ad2:	686b      	ldr	r3, [r5, #4]
 8000ad4:	0252      	lsls	r2, r2, #9
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d108      	bne.n	8000aee <HAL_RCC_OscConfig+0x372>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8000adc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000ade:	03db      	lsls	r3, r3, #15
 8000ae0:	d400      	bmi.n	8000ae4 <HAL_RCC_OscConfig+0x368>
 8000ae2:	e684      	b.n	80007ee <HAL_RCC_OscConfig+0x72>
 8000ae4:	6a23      	ldr	r3, [r4, #32]
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	d000      	beq.n	8000aec <HAL_RCC_OscConfig+0x370>
 8000aea:	e64c      	b.n	8000786 <HAL_RCC_OscConfig+0xa>
 8000aec:	e67f      	b.n	80007ee <HAL_RCC_OscConfig+0x72>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000aee:	6a23      	ldr	r3, [r4, #32]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d011      	beq.n	8000b18 <HAL_RCC_OscConfig+0x39c>
        __HAL_RCC_HSI48_ENABLE();
 8000af4:	2680      	movs	r6, #128	; 0x80
 8000af6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000af8:	0276      	lsls	r6, r6, #9
 8000afa:	4333      	orrs	r3, r6
 8000afc:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 8000afe:	f7ff fc57 	bl	80003b0 <HAL_GetTick>
 8000b02:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000b04:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000b06:	4233      	tst	r3, r6
 8000b08:	d000      	beq.n	8000b0c <HAL_RCC_OscConfig+0x390>
 8000b0a:	e670      	b.n	80007ee <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000b0c:	f7ff fc50 	bl	80003b0 <HAL_GetTick>
 8000b10:	1bc0      	subs	r0, r0, r7
 8000b12:	2802      	cmp	r0, #2
 8000b14:	d9f6      	bls.n	8000b04 <HAL_RCC_OscConfig+0x388>
 8000b16:	e69e      	b.n	8000856 <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_HSI48_DISABLE();
 8000b18:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000b1a:	4a3d      	ldr	r2, [pc, #244]	; (8000c10 <HAL_RCC_OscConfig+0x494>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000b1c:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI48_DISABLE();
 8000b1e:	4013      	ands	r3, r2
 8000b20:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 8000b22:	f7ff fc45 	bl	80003b0 <HAL_GetTick>
 8000b26:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000b28:	0276      	lsls	r6, r6, #9
 8000b2a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000b2c:	4233      	tst	r3, r6
 8000b2e:	d100      	bne.n	8000b32 <HAL_RCC_OscConfig+0x3b6>
 8000b30:	e65d      	b.n	80007ee <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000b32:	f7ff fc3d 	bl	80003b0 <HAL_GetTick>
 8000b36:	1bc0      	subs	r0, r0, r7
 8000b38:	2802      	cmp	r0, #2
 8000b3a:	d9f6      	bls.n	8000b2a <HAL_RCC_OscConfig+0x3ae>
 8000b3c:	e68b      	b.n	8000856 <HAL_RCC_OscConfig+0xda>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b3e:	200c      	movs	r0, #12
 8000b40:	4b32      	ldr	r3, [pc, #200]	; (8000c0c <HAL_RCC_OscConfig+0x490>)
 8000b42:	6859      	ldr	r1, [r3, #4]
 8000b44:	001d      	movs	r5, r3
 8000b46:	4001      	ands	r1, r0
 8000b48:	2908      	cmp	r1, #8
 8000b4a:	d044      	beq.n	8000bd6 <HAL_RCC_OscConfig+0x45a>
        __HAL_RCC_PLL_DISABLE();
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4931      	ldr	r1, [pc, #196]	; (8000c14 <HAL_RCC_OscConfig+0x498>)
 8000b50:	400b      	ands	r3, r1
 8000b52:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b54:	2a02      	cmp	r2, #2
 8000b56:	d12f      	bne.n	8000bb8 <HAL_RCC_OscConfig+0x43c>
        tickstart = HAL_GetTick();
 8000b58:	f7ff fc2a 	bl	80003b0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b5c:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000b5e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b60:	04b6      	lsls	r6, r6, #18
 8000b62:	682b      	ldr	r3, [r5, #0]
 8000b64:	4233      	tst	r3, r6
 8000b66:	d121      	bne.n	8000bac <HAL_RCC_OscConfig+0x430>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000b68:	220f      	movs	r2, #15
 8000b6a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000b6c:	4393      	bics	r3, r2
 8000b6e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000b70:	4313      	orrs	r3, r2
 8000b72:	62eb      	str	r3, [r5, #44]	; 0x2c
 8000b74:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000b76:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000b78:	686a      	ldr	r2, [r5, #4]
 8000b7a:	430b      	orrs	r3, r1
 8000b7c:	4926      	ldr	r1, [pc, #152]	; (8000c18 <HAL_RCC_OscConfig+0x49c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000b7e:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000b80:	400a      	ands	r2, r1
 8000b82:	4313      	orrs	r3, r2
 8000b84:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000b86:	2380      	movs	r3, #128	; 0x80
 8000b88:	682a      	ldr	r2, [r5, #0]
 8000b8a:	045b      	lsls	r3, r3, #17
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000b90:	f7ff fc0e 	bl	80003b0 <HAL_GetTick>
 8000b94:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000b96:	04a4      	lsls	r4, r4, #18
 8000b98:	682b      	ldr	r3, [r5, #0]
 8000b9a:	4223      	tst	r3, r4
 8000b9c:	d000      	beq.n	8000ba0 <HAL_RCC_OscConfig+0x424>
 8000b9e:	e62a      	b.n	80007f6 <HAL_RCC_OscConfig+0x7a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ba0:	f7ff fc06 	bl	80003b0 <HAL_GetTick>
 8000ba4:	1b80      	subs	r0, r0, r6
 8000ba6:	2802      	cmp	r0, #2
 8000ba8:	d9f6      	bls.n	8000b98 <HAL_RCC_OscConfig+0x41c>
 8000baa:	e654      	b.n	8000856 <HAL_RCC_OscConfig+0xda>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bac:	f7ff fc00 	bl	80003b0 <HAL_GetTick>
 8000bb0:	1bc0      	subs	r0, r0, r7
 8000bb2:	2802      	cmp	r0, #2
 8000bb4:	d9d5      	bls.n	8000b62 <HAL_RCC_OscConfig+0x3e6>
 8000bb6:	e64e      	b.n	8000856 <HAL_RCC_OscConfig+0xda>
        tickstart = HAL_GetTick();
 8000bb8:	f7ff fbfa 	bl	80003b0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bbc:	2480      	movs	r4, #128	; 0x80
        tickstart = HAL_GetTick();
 8000bbe:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bc0:	04a4      	lsls	r4, r4, #18
 8000bc2:	682b      	ldr	r3, [r5, #0]
 8000bc4:	4223      	tst	r3, r4
 8000bc6:	d100      	bne.n	8000bca <HAL_RCC_OscConfig+0x44e>
 8000bc8:	e615      	b.n	80007f6 <HAL_RCC_OscConfig+0x7a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bca:	f7ff fbf1 	bl	80003b0 <HAL_GetTick>
 8000bce:	1b80      	subs	r0, r0, r6
 8000bd0:	2802      	cmp	r0, #2
 8000bd2:	d9f6      	bls.n	8000bc2 <HAL_RCC_OscConfig+0x446>
 8000bd4:	e63f      	b.n	8000856 <HAL_RCC_OscConfig+0xda>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000bd6:	2a01      	cmp	r2, #1
 8000bd8:	d100      	bne.n	8000bdc <HAL_RCC_OscConfig+0x460>
 8000bda:	e5d4      	b.n	8000786 <HAL_RCC_OscConfig+0xa>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000bdc:	22c0      	movs	r2, #192	; 0xc0
        pll_config  = RCC->CFGR;
 8000bde:	6858      	ldr	r0, [r3, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000be0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000be2:	0252      	lsls	r2, r2, #9
        pll_config2 = RCC->CFGR2;
 8000be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000be6:	4002      	ands	r2, r0
 8000be8:	428a      	cmp	r2, r1
 8000bea:	d000      	beq.n	8000bee <HAL_RCC_OscConfig+0x472>
 8000bec:	e5cb      	b.n	8000786 <HAL_RCC_OscConfig+0xa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000bee:	220f      	movs	r2, #15
 8000bf0:	4013      	ands	r3, r2
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000bf2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d000      	beq.n	8000bfa <HAL_RCC_OscConfig+0x47e>
 8000bf8:	e5c5      	b.n	8000786 <HAL_RCC_OscConfig+0xa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8000bfa:	23f0      	movs	r3, #240	; 0xf0
 8000bfc:	039b      	lsls	r3, r3, #14
 8000bfe:	4018      	ands	r0, r3
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000c00:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000c02:	1ac0      	subs	r0, r0, r3
 8000c04:	1e43      	subs	r3, r0, #1
 8000c06:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8000c08:	b2c0      	uxtb	r0, r0
 8000c0a:	e5bd      	b.n	8000788 <HAL_RCC_OscConfig+0xc>
 8000c0c:	40021000 	.word	0x40021000
 8000c10:	fffeffff 	.word	0xfffeffff
 8000c14:	feffffff 	.word	0xfeffffff
 8000c18:	ffc27fff 	.word	0xffc27fff

08000c1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000c1c:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000c1e:	4c1b      	ldr	r4, [pc, #108]	; (8000c8c <HAL_RCC_GetSysClockFreq+0x70>)
{
 8000c20:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000c22:	2210      	movs	r2, #16
 8000c24:	0021      	movs	r1, r4
 8000c26:	4668      	mov	r0, sp
 8000c28:	f000 fe60 	bl	80018ec <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8000c2c:	0021      	movs	r1, r4
 8000c2e:	ad04      	add	r5, sp, #16
 8000c30:	2210      	movs	r2, #16
 8000c32:	3110      	adds	r1, #16
 8000c34:	0028      	movs	r0, r5
 8000c36:	f000 fe59 	bl	80018ec <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000c3a:	200c      	movs	r0, #12
  tmpreg = RCC->CFGR;
 8000c3c:	4a14      	ldr	r2, [pc, #80]	; (8000c90 <HAL_RCC_GetSysClockFreq+0x74>)
 8000c3e:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000c40:	4018      	ands	r0, r3
 8000c42:	2808      	cmp	r0, #8
 8000c44:	d009      	beq.n	8000c5a <HAL_RCC_GetSysClockFreq+0x3e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000c46:	380c      	subs	r0, #12
 8000c48:	4243      	negs	r3, r0
 8000c4a:	4158      	adcs	r0, r3
 8000c4c:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <HAL_RCC_GetSysClockFreq+0x78>)
 8000c4e:	4240      	negs	r0, r0
 8000c50:	4018      	ands	r0, r3
 8000c52:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <HAL_RCC_GetSysClockFreq+0x7c>)
 8000c54:	18c0      	adds	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000c56:	b009      	add	sp, #36	; 0x24
 8000c58:	bd30      	pop	{r4, r5, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000c5a:	200f      	movs	r0, #15
 8000c5c:	466c      	mov	r4, sp
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000c5e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000c60:	0c99      	lsrs	r1, r3, #18
 8000c62:	4001      	ands	r1, r0
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000c64:	4002      	ands	r2, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000c66:	5c64      	ldrb	r4, [r4, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000c68:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000c6a:	22c0      	movs	r2, #192	; 0xc0
 8000c6c:	2080      	movs	r0, #128	; 0x80
 8000c6e:	0252      	lsls	r2, r2, #9
 8000c70:	4013      	ands	r3, r2
 8000c72:	0240      	lsls	r0, r0, #9
 8000c74:	4283      	cmp	r3, r0
 8000c76:	d101      	bne.n	8000c7c <HAL_RCC_GetSysClockFreq+0x60>
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000c78:	4807      	ldr	r0, [pc, #28]	; (8000c98 <HAL_RCC_GetSysClockFreq+0x7c>)
 8000c7a:	e002      	b.n	8000c82 <HAL_RCC_GetSysClockFreq+0x66>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d1fb      	bne.n	8000c78 <HAL_RCC_GetSysClockFreq+0x5c>
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000c80:	4806      	ldr	r0, [pc, #24]	; (8000c9c <HAL_RCC_GetSysClockFreq+0x80>)
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000c82:	f7ff fa55 	bl	8000130 <__udivsi3>
 8000c86:	4360      	muls	r0, r4
 8000c88:	e7e5      	b.n	8000c56 <HAL_RCC_GetSysClockFreq+0x3a>
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	08001930 	.word	0x08001930
 8000c90:	40021000 	.word	0x40021000
 8000c94:	02625a00 	.word	0x02625a00
 8000c98:	007a1200 	.word	0x007a1200
 8000c9c:	02dc6c00 	.word	0x02dc6c00

08000ca0 <HAL_RCC_ClockConfig>:
{
 8000ca0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000ca2:	0005      	movs	r5, r0
 8000ca4:	000f      	movs	r7, r1
  if(RCC_ClkInitStruct == NULL)
 8000ca6:	2800      	cmp	r0, #0
 8000ca8:	d101      	bne.n	8000cae <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8000caa:	2001      	movs	r0, #1
}
 8000cac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000cae:	2201      	movs	r2, #1
 8000cb0:	4c3b      	ldr	r4, [pc, #236]	; (8000da0 <HAL_RCC_ClockConfig+0x100>)
 8000cb2:	6823      	ldr	r3, [r4, #0]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d31c      	bcc.n	8000cf4 <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000cba:	6829      	ldr	r1, [r5, #0]
 8000cbc:	078b      	lsls	r3, r1, #30
 8000cbe:	d422      	bmi.n	8000d06 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000cc0:	07cb      	lsls	r3, r1, #31
 8000cc2:	d42f      	bmi.n	8000d24 <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	6822      	ldr	r2, [r4, #0]
 8000cc8:	401a      	ands	r2, r3
 8000cca:	42ba      	cmp	r2, r7
 8000ccc:	d859      	bhi.n	8000d82 <HAL_RCC_ClockConfig+0xe2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cce:	682b      	ldr	r3, [r5, #0]
 8000cd0:	4c34      	ldr	r4, [pc, #208]	; (8000da4 <HAL_RCC_ClockConfig+0x104>)
 8000cd2:	075b      	lsls	r3, r3, #29
 8000cd4:	d45c      	bmi.n	8000d90 <HAL_RCC_ClockConfig+0xf0>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000cd6:	f7ff ffa1 	bl	8000c1c <HAL_RCC_GetSysClockFreq>
 8000cda:	6863      	ldr	r3, [r4, #4]
 8000cdc:	4a32      	ldr	r2, [pc, #200]	; (8000da8 <HAL_RCC_ClockConfig+0x108>)
 8000cde:	061b      	lsls	r3, r3, #24
 8000ce0:	0f1b      	lsrs	r3, r3, #28
 8000ce2:	5cd3      	ldrb	r3, [r2, r3]
 8000ce4:	40d8      	lsrs	r0, r3
 8000ce6:	4b31      	ldr	r3, [pc, #196]	; (8000dac <HAL_RCC_ClockConfig+0x10c>)
 8000ce8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000cea:	2003      	movs	r0, #3
 8000cec:	f7ff fb22 	bl	8000334 <HAL_InitTick>
  return HAL_OK;
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	e7db      	b.n	8000cac <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cf4:	6823      	ldr	r3, [r4, #0]
 8000cf6:	4393      	bics	r3, r2
 8000cf8:	430b      	orrs	r3, r1
 8000cfa:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cfc:	6823      	ldr	r3, [r4, #0]
 8000cfe:	4013      	ands	r3, r2
 8000d00:	428b      	cmp	r3, r1
 8000d02:	d1d2      	bne.n	8000caa <HAL_RCC_ClockConfig+0xa>
 8000d04:	e7d9      	b.n	8000cba <HAL_RCC_ClockConfig+0x1a>
 8000d06:	4a27      	ldr	r2, [pc, #156]	; (8000da4 <HAL_RCC_ClockConfig+0x104>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d08:	074b      	lsls	r3, r1, #29
 8000d0a:	d504      	bpl.n	8000d16 <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8000d0c:	23e0      	movs	r3, #224	; 0xe0
 8000d0e:	6850      	ldr	r0, [r2, #4]
 8000d10:	00db      	lsls	r3, r3, #3
 8000d12:	4303      	orrs	r3, r0
 8000d14:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d16:	20f0      	movs	r0, #240	; 0xf0
 8000d18:	6853      	ldr	r3, [r2, #4]
 8000d1a:	4383      	bics	r3, r0
 8000d1c:	68a8      	ldr	r0, [r5, #8]
 8000d1e:	4303      	orrs	r3, r0
 8000d20:	6053      	str	r3, [r2, #4]
 8000d22:	e7cd      	b.n	8000cc0 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d24:	686a      	ldr	r2, [r5, #4]
 8000d26:	4e1f      	ldr	r6, [pc, #124]	; (8000da4 <HAL_RCC_ClockConfig+0x104>)
 8000d28:	2a01      	cmp	r2, #1
 8000d2a:	d11a      	bne.n	8000d62 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d2c:	6833      	ldr	r3, [r6, #0]
 8000d2e:	039b      	lsls	r3, r3, #14
 8000d30:	d5bb      	bpl.n	8000caa <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d32:	2103      	movs	r1, #3
 8000d34:	6873      	ldr	r3, [r6, #4]
 8000d36:	438b      	bics	r3, r1
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000d3c:	f7ff fb38 	bl	80003b0 <HAL_GetTick>
 8000d40:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d42:	230c      	movs	r3, #12
 8000d44:	6872      	ldr	r2, [r6, #4]
 8000d46:	401a      	ands	r2, r3
 8000d48:	686b      	ldr	r3, [r5, #4]
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d0b9      	beq.n	8000cc4 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d50:	f7ff fb2e 	bl	80003b0 <HAL_GetTick>
 8000d54:	9b01      	ldr	r3, [sp, #4]
 8000d56:	1ac0      	subs	r0, r0, r3
 8000d58:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <HAL_RCC_ClockConfig+0x110>)
 8000d5a:	4298      	cmp	r0, r3
 8000d5c:	d9f1      	bls.n	8000d42 <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 8000d5e:	2003      	movs	r0, #3
 8000d60:	e7a4      	b.n	8000cac <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d62:	2a02      	cmp	r2, #2
 8000d64:	d103      	bne.n	8000d6e <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d66:	6833      	ldr	r3, [r6, #0]
 8000d68:	019b      	lsls	r3, r3, #6
 8000d6a:	d4e2      	bmi.n	8000d32 <HAL_RCC_ClockConfig+0x92>
 8000d6c:	e79d      	b.n	8000caa <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8000d6e:	2a03      	cmp	r2, #3
 8000d70:	d103      	bne.n	8000d7a <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000d72:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8000d74:	03db      	lsls	r3, r3, #15
 8000d76:	d4dc      	bmi.n	8000d32 <HAL_RCC_ClockConfig+0x92>
 8000d78:	e797      	b.n	8000caa <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d7a:	6833      	ldr	r3, [r6, #0]
 8000d7c:	079b      	lsls	r3, r3, #30
 8000d7e:	d4d8      	bmi.n	8000d32 <HAL_RCC_ClockConfig+0x92>
 8000d80:	e793      	b.n	8000caa <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d82:	6822      	ldr	r2, [r4, #0]
 8000d84:	439a      	bics	r2, r3
 8000d86:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d88:	6822      	ldr	r2, [r4, #0]
 8000d8a:	421a      	tst	r2, r3
 8000d8c:	d09f      	beq.n	8000cce <HAL_RCC_ClockConfig+0x2e>
 8000d8e:	e78c      	b.n	8000caa <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000d90:	6863      	ldr	r3, [r4, #4]
 8000d92:	4a08      	ldr	r2, [pc, #32]	; (8000db4 <HAL_RCC_ClockConfig+0x114>)
 8000d94:	4013      	ands	r3, r2
 8000d96:	68ea      	ldr	r2, [r5, #12]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	6063      	str	r3, [r4, #4]
 8000d9c:	e79b      	b.n	8000cd6 <HAL_RCC_ClockConfig+0x36>
 8000d9e:	46c0      	nop			; (mov r8, r8)
 8000da0:	40022000 	.word	0x40022000
 8000da4:	40021000 	.word	0x40021000
 8000da8:	08001918 	.word	0x08001918
 8000dac:	20000008 	.word	0x20000008
 8000db0:	00001388 	.word	0x00001388
 8000db4:	fffff8ff 	.word	0xfffff8ff

08000db8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8000db8:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <HAL_RCC_GetPCLK1Freq+0x14>)
 8000dba:	4a05      	ldr	r2, [pc, #20]	; (8000dd0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	055b      	lsls	r3, r3, #21
 8000dc0:	0f5b      	lsrs	r3, r3, #29
 8000dc2:	5cd3      	ldrb	r3, [r2, r3]
 8000dc4:	4a03      	ldr	r2, [pc, #12]	; (8000dd4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000dc6:	6810      	ldr	r0, [r2, #0]
 8000dc8:	40d8      	lsrs	r0, r3
}    
 8000dca:	4770      	bx	lr
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	08001928 	.word	0x08001928
 8000dd4:	20000008 	.word	0x20000008

08000dd8 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8000dd8:	6803      	ldr	r3, [r0, #0]
 8000dda:	4907      	ldr	r1, [pc, #28]	; (8000df8 <UART_EndRxTransfer+0x20>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	400a      	ands	r2, r1
 8000de0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000de2:	689a      	ldr	r2, [r3, #8]
 8000de4:	3123      	adds	r1, #35	; 0x23
 8000de6:	31ff      	adds	r1, #255	; 0xff
 8000de8:	438a      	bics	r2, r1
 8000dea:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8000dec:	2320      	movs	r3, #32
 8000dee:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	6603      	str	r3, [r0, #96]	; 0x60
}
 8000df4:	4770      	bx	lr
 8000df6:	46c0      	nop			; (mov r8, r8)
 8000df8:	fffffedf 	.word	0xfffffedf

08000dfc <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8000dfc:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8000dfe:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8000e00:	2b21      	cmp	r3, #33	; 0x21
 8000e02:	d10d      	bne.n	8000e20 <UART_TxISR_16BIT+0x24>
  {
    if (huart->TxXferCount == 0U)
 8000e04:	0001      	movs	r1, r0
 8000e06:	3152      	adds	r1, #82	; 0x52
 8000e08:	880a      	ldrh	r2, [r1, #0]
 8000e0a:	6803      	ldr	r3, [r0, #0]
 8000e0c:	2a00      	cmp	r2, #0
 8000e0e:	d108      	bne.n	8000e22 <UART_TxISR_16BIT+0x26>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8000e10:	2180      	movs	r1, #128	; 0x80
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	438a      	bics	r2, r1
 8000e16:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8000e18:	2240      	movs	r2, #64	; 0x40
 8000e1a:	6819      	ldr	r1, [r3, #0]
 8000e1c:	430a      	orrs	r2, r1
 8000e1e:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8000e20:	bd10      	pop	{r4, pc}
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8000e22:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8000e24:	8822      	ldrh	r2, [r4, #0]
      huart->pTxBuffPtr += 2U;
 8000e26:	3402      	adds	r4, #2
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8000e28:	05d2      	lsls	r2, r2, #23
 8000e2a:	0dd2      	lsrs	r2, r2, #23
 8000e2c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8000e2e:	64c4      	str	r4, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8000e30:	880b      	ldrh	r3, [r1, #0]
 8000e32:	3b01      	subs	r3, #1
 8000e34:	b29b      	uxth	r3, r3
 8000e36:	800b      	strh	r3, [r1, #0]
}
 8000e38:	e7f2      	b.n	8000e20 <UART_TxISR_16BIT+0x24>

08000e3a <UART_TxISR_8BIT>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8000e3a:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8000e3c:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8000e3e:	2b21      	cmp	r3, #33	; 0x21
 8000e40:	d10d      	bne.n	8000e5e <UART_TxISR_8BIT+0x24>
    if (huart->TxXferCount == 0U)
 8000e42:	0001      	movs	r1, r0
 8000e44:	3152      	adds	r1, #82	; 0x52
 8000e46:	880a      	ldrh	r2, [r1, #0]
 8000e48:	6803      	ldr	r3, [r0, #0]
 8000e4a:	2a00      	cmp	r2, #0
 8000e4c:	d108      	bne.n	8000e60 <UART_TxISR_8BIT+0x26>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8000e4e:	2180      	movs	r1, #128	; 0x80
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	438a      	bics	r2, r1
 8000e54:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8000e56:	2240      	movs	r2, #64	; 0x40
 8000e58:	6819      	ldr	r1, [r3, #0]
 8000e5a:	430a      	orrs	r2, r1
 8000e5c:	601a      	str	r2, [r3, #0]
}
 8000e5e:	bd10      	pop	{r4, pc}
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8000e60:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8000e62:	7814      	ldrb	r4, [r2, #0]
      huart->pTxBuffPtr++;
 8000e64:	3201      	adds	r2, #1
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8000e66:	851c      	strh	r4, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8000e68:	64c2      	str	r2, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8000e6a:	880b      	ldrh	r3, [r1, #0]
 8000e6c:	3b01      	subs	r3, #1
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	800b      	strh	r3, [r1, #0]
}
 8000e72:	e7f4      	b.n	8000e5e <UART_TxISR_8BIT+0x24>

08000e74 <HAL_UART_DeInit>:
{
 8000e74:	b570      	push	{r4, r5, r6, lr}
 8000e76:	0005      	movs	r5, r0
    return HAL_ERROR;
 8000e78:	2001      	movs	r0, #1
  if (huart == NULL)
 8000e7a:	2d00      	cmp	r5, #0
 8000e7c:	d012      	beq.n	8000ea4 <HAL_UART_DeInit+0x30>
  huart->gState = HAL_UART_STATE_BUSY;
 8000e7e:	2324      	movs	r3, #36	; 0x24
  huart->Instance->CR1 = 0x0U;
 8000e80:	2400      	movs	r4, #0
  huart->gState = HAL_UART_STATE_BUSY;
 8000e82:	676b      	str	r3, [r5, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8000e84:	682b      	ldr	r3, [r5, #0]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	4382      	bics	r2, r0
 8000e8a:	601a      	str	r2, [r3, #0]
  HAL_UART_MspDeInit(huart);
 8000e8c:	0028      	movs	r0, r5
  huart->Instance->CR1 = 0x0U;
 8000e8e:	601c      	str	r4, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8000e90:	605c      	str	r4, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8000e92:	609c      	str	r4, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8000e94:	f000 fcd0 	bl	8001838 <HAL_UART_MspDeInit>
  return HAL_OK;
 8000e98:	0020      	movs	r0, r4
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000e9a:	67ec      	str	r4, [r5, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_RESET;
 8000e9c:	676c      	str	r4, [r5, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_RESET;
 8000e9e:	67ac      	str	r4, [r5, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8000ea0:	3570      	adds	r5, #112	; 0x70
 8000ea2:	702c      	strb	r4, [r5, #0]
}
 8000ea4:	bd70      	pop	{r4, r5, r6, pc}
	...

08000ea8 <HAL_UART_Transmit_IT>:
{
 8000ea8:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 8000eaa:	6f44      	ldr	r4, [r0, #116]	; 0x74
{
 8000eac:	0003      	movs	r3, r0
    return HAL_BUSY;
 8000eae:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8000eb0:	2c20      	cmp	r4, #32
 8000eb2:	d130      	bne.n	8000f16 <HAL_UART_Transmit_IT+0x6e>
      return HAL_ERROR;
 8000eb4:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8000eb6:	2900      	cmp	r1, #0
 8000eb8:	d02d      	beq.n	8000f16 <HAL_UART_Transmit_IT+0x6e>
 8000eba:	2a00      	cmp	r2, #0
 8000ebc:	d02b      	beq.n	8000f16 <HAL_UART_Transmit_IT+0x6e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000ebe:	2480      	movs	r4, #128	; 0x80
 8000ec0:	689d      	ldr	r5, [r3, #8]
 8000ec2:	0164      	lsls	r4, r4, #5
 8000ec4:	42a5      	cmp	r5, r4
 8000ec6:	d104      	bne.n	8000ed2 <HAL_UART_Transmit_IT+0x2a>
 8000ec8:	691c      	ldr	r4, [r3, #16]
 8000eca:	2c00      	cmp	r4, #0
 8000ecc:	d101      	bne.n	8000ed2 <HAL_UART_Transmit_IT+0x2a>
      if ((((uint32_t)pData) & 1U) != 0U)
 8000ece:	4201      	tst	r1, r0
 8000ed0:	d121      	bne.n	8000f16 <HAL_UART_Transmit_IT+0x6e>
    __HAL_LOCK(huart);
 8000ed2:	001c      	movs	r4, r3
 8000ed4:	3470      	adds	r4, #112	; 0x70
 8000ed6:	7826      	ldrb	r6, [r4, #0]
    return HAL_BUSY;
 8000ed8:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8000eda:	2e01      	cmp	r6, #1
 8000edc:	d01b      	beq.n	8000f16 <HAL_UART_Transmit_IT+0x6e>
 8000ede:	3801      	subs	r0, #1
 8000ee0:	7020      	strb	r0, [r4, #0]
    huart->pTxBuffPtr  = pData;
 8000ee2:	64d9      	str	r1, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8000ee4:	0019      	movs	r1, r3
 8000ee6:	3150      	adds	r1, #80	; 0x50
 8000ee8:	800a      	strh	r2, [r1, #0]
    huart->TxXferCount = Size;
 8000eea:	804a      	strh	r2, [r1, #2]
    huart->TxISR       = NULL;
 8000eec:	2200      	movs	r2, #0
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000eee:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->TxISR       = NULL;
 8000ef0:	665a      	str	r2, [r3, #100]	; 0x64
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000ef2:	3221      	adds	r2, #33	; 0x21
 8000ef4:	675a      	str	r2, [r3, #116]	; 0x74
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000ef6:	2280      	movs	r2, #128	; 0x80
 8000ef8:	0152      	lsls	r2, r2, #5
 8000efa:	4295      	cmp	r5, r2
 8000efc:	d10c      	bne.n	8000f18 <HAL_UART_Transmit_IT+0x70>
 8000efe:	691a      	ldr	r2, [r3, #16]
 8000f00:	2a00      	cmp	r2, #0
 8000f02:	d109      	bne.n	8000f18 <HAL_UART_Transmit_IT+0x70>
      huart->TxISR = UART_TxISR_16BIT;
 8000f04:	4a05      	ldr	r2, [pc, #20]	; (8000f1c <HAL_UART_Transmit_IT+0x74>)
      huart->TxISR = UART_TxISR_8BIT;
 8000f06:	665a      	str	r2, [r3, #100]	; 0x64
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	2380      	movs	r3, #128	; 0x80
    __HAL_UNLOCK(huart);
 8000f0c:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8000f0e:	6811      	ldr	r1, [r2, #0]
    __HAL_UNLOCK(huart);
 8000f10:	7020      	strb	r0, [r4, #0]
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8000f12:	430b      	orrs	r3, r1
 8000f14:	6013      	str	r3, [r2, #0]
}
 8000f16:	bd70      	pop	{r4, r5, r6, pc}
      huart->TxISR = UART_TxISR_8BIT;
 8000f18:	4a01      	ldr	r2, [pc, #4]	; (8000f20 <HAL_UART_Transmit_IT+0x78>)
 8000f1a:	e7f4      	b.n	8000f06 <HAL_UART_Transmit_IT+0x5e>
 8000f1c:	08000dfd 	.word	0x08000dfd
 8000f20:	08000e3b 	.word	0x08000e3b

08000f24 <HAL_UART_Receive_IT>:
{
 8000f24:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8000f26:	6f84      	ldr	r4, [r0, #120]	; 0x78
{
 8000f28:	0003      	movs	r3, r0
    return HAL_BUSY;
 8000f2a:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8000f2c:	2c20      	cmp	r4, #32
 8000f2e:	d141      	bne.n	8000fb4 <HAL_UART_Receive_IT+0x90>
      return HAL_ERROR;
 8000f30:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8000f32:	2900      	cmp	r1, #0
 8000f34:	d03e      	beq.n	8000fb4 <HAL_UART_Receive_IT+0x90>
 8000f36:	2a00      	cmp	r2, #0
 8000f38:	d03c      	beq.n	8000fb4 <HAL_UART_Receive_IT+0x90>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000f3a:	2580      	movs	r5, #128	; 0x80
 8000f3c:	689c      	ldr	r4, [r3, #8]
 8000f3e:	016d      	lsls	r5, r5, #5
 8000f40:	42ac      	cmp	r4, r5
 8000f42:	d104      	bne.n	8000f4e <HAL_UART_Receive_IT+0x2a>
 8000f44:	691d      	ldr	r5, [r3, #16]
 8000f46:	2d00      	cmp	r5, #0
 8000f48:	d101      	bne.n	8000f4e <HAL_UART_Receive_IT+0x2a>
      if ((((uint32_t)pData) & 1U) != 0U)
 8000f4a:	4201      	tst	r1, r0
 8000f4c:	d132      	bne.n	8000fb4 <HAL_UART_Receive_IT+0x90>
    __HAL_LOCK(huart);
 8000f4e:	001d      	movs	r5, r3
 8000f50:	3570      	adds	r5, #112	; 0x70
 8000f52:	782e      	ldrb	r6, [r5, #0]
    return HAL_BUSY;
 8000f54:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8000f56:	2e01      	cmp	r6, #1
 8000f58:	d02c      	beq.n	8000fb4 <HAL_UART_Receive_IT+0x90>
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	7028      	strb	r0, [r5, #0]
    huart->pRxBuffPtr  = pData;
 8000f5e:	6559      	str	r1, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8000f60:	0019      	movs	r1, r3
 8000f62:	3158      	adds	r1, #88	; 0x58
 8000f64:	800a      	strh	r2, [r1, #0]
    huart->RxXferCount = Size;
 8000f66:	804a      	strh	r2, [r1, #2]
    UART_MASK_COMPUTATION(huart);
 8000f68:	2080      	movs	r0, #128	; 0x80
    huart->RxISR       = NULL;
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	001a      	movs	r2, r3
 8000f6e:	6619      	str	r1, [r3, #96]	; 0x60
    UART_MASK_COMPUTATION(huart);
 8000f70:	0140      	lsls	r0, r0, #5
 8000f72:	325c      	adds	r2, #92	; 0x5c
 8000f74:	4284      	cmp	r4, r0
 8000f76:	d120      	bne.n	8000fba <HAL_UART_Receive_IT+0x96>
 8000f78:	6919      	ldr	r1, [r3, #16]
 8000f7a:	2900      	cmp	r1, #0
 8000f7c:	d11b      	bne.n	8000fb6 <HAL_UART_Receive_IT+0x92>
 8000f7e:	4918      	ldr	r1, [pc, #96]	; (8000fe0 <HAL_UART_Receive_IT+0xbc>)
 8000f80:	8011      	strh	r1, [r2, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f82:	2200      	movs	r2, #0
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000f84:	2101      	movs	r1, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f86:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8000f88:	3222      	adds	r2, #34	; 0x22
 8000f8a:	679a      	str	r2, [r3, #120]	; 0x78
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	6890      	ldr	r0, [r2, #8]
 8000f90:	4301      	orrs	r1, r0
 8000f92:	6091      	str	r1, [r2, #8]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000f94:	2180      	movs	r1, #128	; 0x80
 8000f96:	0149      	lsls	r1, r1, #5
 8000f98:	428c      	cmp	r4, r1
 8000f9a:	d11e      	bne.n	8000fda <HAL_UART_Receive_IT+0xb6>
 8000f9c:	6919      	ldr	r1, [r3, #16]
 8000f9e:	2900      	cmp	r1, #0
 8000fa0:	d11b      	bne.n	8000fda <HAL_UART_Receive_IT+0xb6>
      huart->RxISR = UART_RxISR_16BIT;
 8000fa2:	4910      	ldr	r1, [pc, #64]	; (8000fe4 <HAL_UART_Receive_IT+0xc0>)
      huart->RxISR = UART_RxISR_8BIT;
 8000fa4:	6619      	str	r1, [r3, #96]	; 0x60
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8000fa6:	2390      	movs	r3, #144	; 0x90
    __HAL_UNLOCK(huart);
 8000fa8:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8000faa:	6811      	ldr	r1, [r2, #0]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	430b      	orrs	r3, r1
    __HAL_UNLOCK(huart);
 8000fb0:	7028      	strb	r0, [r5, #0]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8000fb2:	6013      	str	r3, [r2, #0]
}
 8000fb4:	bd70      	pop	{r4, r5, r6, pc}
    UART_MASK_COMPUTATION(huart);
 8000fb6:	21ff      	movs	r1, #255	; 0xff
 8000fb8:	e7e2      	b.n	8000f80 <HAL_UART_Receive_IT+0x5c>
 8000fba:	2c00      	cmp	r4, #0
 8000fbc:	d104      	bne.n	8000fc8 <HAL_UART_Receive_IT+0xa4>
 8000fbe:	6919      	ldr	r1, [r3, #16]
 8000fc0:	2900      	cmp	r1, #0
 8000fc2:	d0f8      	beq.n	8000fb6 <HAL_UART_Receive_IT+0x92>
 8000fc4:	217f      	movs	r1, #127	; 0x7f
 8000fc6:	e7db      	b.n	8000f80 <HAL_UART_Receive_IT+0x5c>
 8000fc8:	2080      	movs	r0, #128	; 0x80
 8000fca:	0540      	lsls	r0, r0, #21
 8000fcc:	4284      	cmp	r4, r0
 8000fce:	d1d7      	bne.n	8000f80 <HAL_UART_Receive_IT+0x5c>
 8000fd0:	6919      	ldr	r1, [r3, #16]
 8000fd2:	2900      	cmp	r1, #0
 8000fd4:	d0f6      	beq.n	8000fc4 <HAL_UART_Receive_IT+0xa0>
 8000fd6:	213f      	movs	r1, #63	; 0x3f
 8000fd8:	e7d2      	b.n	8000f80 <HAL_UART_Receive_IT+0x5c>
      huart->RxISR = UART_RxISR_8BIT;
 8000fda:	4903      	ldr	r1, [pc, #12]	; (8000fe8 <HAL_UART_Receive_IT+0xc4>)
 8000fdc:	e7e2      	b.n	8000fa4 <HAL_UART_Receive_IT+0x80>
 8000fde:	46c0      	nop			; (mov r8, r8)
 8000fe0:	000001ff 	.word	0x000001ff
 8000fe4:	0800104d 	.word	0x0800104d
 8000fe8:	08000fed 	.word	0x08000fed

08000fec <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8000fec:	6f82      	ldr	r2, [r0, #120]	; 0x78
{
 8000fee:	b510      	push	{r4, lr}
 8000ff0:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8000ff2:	2a22      	cmp	r2, #34	; 0x22
 8000ff4:	d123      	bne.n	800103e <UART_RxISR_8BIT+0x52>
  uint16_t uhMask = huart->Mask;
 8000ff6:	0002      	movs	r2, r0
 8000ff8:	325c      	adds	r2, #92	; 0x5c
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8000ffa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8000ffc:	8812      	ldrh	r2, [r2, #0]
 8000ffe:	4013      	ands	r3, r2
 8001000:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8001002:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
    huart->RxXferCount--;
 8001004:	0002      	movs	r2, r0
    huart->pRxBuffPtr++;
 8001006:	6d43      	ldr	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8001008:	325a      	adds	r2, #90	; 0x5a
    huart->pRxBuffPtr++;
 800100a:	3301      	adds	r3, #1
 800100c:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 800100e:	8813      	ldrh	r3, [r2, #0]
 8001010:	3b01      	subs	r3, #1
 8001012:	b29b      	uxth	r3, r3
 8001014:	8013      	strh	r3, [r2, #0]

    if (huart->RxXferCount == 0U)
 8001016:	8813      	ldrh	r3, [r2, #0]
 8001018:	b29b      	uxth	r3, r3
 800101a:	2b00      	cmp	r3, #0
 800101c:	d10e      	bne.n	800103c <UART_RxISR_8BIT+0x50>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800101e:	6802      	ldr	r2, [r0, #0]
 8001020:	4c09      	ldr	r4, [pc, #36]	; (8001048 <UART_RxISR_8BIT+0x5c>)
 8001022:	6811      	ldr	r1, [r2, #0]
 8001024:	4021      	ands	r1, r4
 8001026:	6011      	str	r1, [r2, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001028:	6891      	ldr	r1, [r2, #8]
 800102a:	3423      	adds	r4, #35	; 0x23
 800102c:	34ff      	adds	r4, #255	; 0xff
 800102e:	43a1      	bics	r1, r4
 8001030:	6091      	str	r1, [r2, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001032:	2220      	movs	r2, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8001034:	6603      	str	r3, [r0, #96]	; 0x60
      huart->RxState = HAL_UART_STATE_READY;
 8001036:	6782      	str	r2, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8001038:	f000 fba8 	bl	800178c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800103c:	bd10      	pop	{r4, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800103e:	2208      	movs	r2, #8
 8001040:	6999      	ldr	r1, [r3, #24]
 8001042:	430a      	orrs	r2, r1
 8001044:	619a      	str	r2, [r3, #24]
}
 8001046:	e7f9      	b.n	800103c <UART_RxISR_8BIT+0x50>
 8001048:	fffffedf 	.word	0xfffffedf

0800104c <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800104c:	6f82      	ldr	r2, [r0, #120]	; 0x78
{
 800104e:	b510      	push	{r4, lr}
 8001050:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001052:	2a22      	cmp	r2, #34	; 0x22
 8001054:	d121      	bne.n	800109a <UART_RxISR_16BIT+0x4e>
  uint16_t uhMask = huart->Mask;
 8001056:	0001      	movs	r1, r0
 8001058:	315c      	adds	r1, #92	; 0x5c
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800105a:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 800105c:	8809      	ldrh	r1, [r1, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800105e:	6d42      	ldr	r2, [r0, #84]	; 0x54
    *tmp = (uint16_t)(uhdata & uhMask);
 8001060:	4021      	ands	r1, r4
 8001062:	8011      	strh	r1, [r2, #0]
    huart->pRxBuffPtr += 2U;
    huart->RxXferCount--;
 8001064:	0001      	movs	r1, r0
    huart->pRxBuffPtr += 2U;
 8001066:	3202      	adds	r2, #2
 8001068:	6542      	str	r2, [r0, #84]	; 0x54
    huart->RxXferCount--;
 800106a:	315a      	adds	r1, #90	; 0x5a
 800106c:	880a      	ldrh	r2, [r1, #0]
 800106e:	3a01      	subs	r2, #1
 8001070:	b292      	uxth	r2, r2
 8001072:	800a      	strh	r2, [r1, #0]

    if (huart->RxXferCount == 0U)
 8001074:	880a      	ldrh	r2, [r1, #0]
 8001076:	b292      	uxth	r2, r2
 8001078:	2a00      	cmp	r2, #0
 800107a:	d10d      	bne.n	8001098 <UART_RxISR_16BIT+0x4c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800107c:	6819      	ldr	r1, [r3, #0]
 800107e:	4c09      	ldr	r4, [pc, #36]	; (80010a4 <UART_RxISR_16BIT+0x58>)
 8001080:	4021      	ands	r1, r4
 8001082:	6019      	str	r1, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001084:	6899      	ldr	r1, [r3, #8]
 8001086:	3423      	adds	r4, #35	; 0x23
 8001088:	34ff      	adds	r4, #255	; 0xff
 800108a:	43a1      	bics	r1, r4
 800108c:	6099      	str	r1, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800108e:	2320      	movs	r3, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8001090:	6602      	str	r2, [r0, #96]	; 0x60
      huart->RxState = HAL_UART_STATE_READY;
 8001092:	6783      	str	r3, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8001094:	f000 fb7a 	bl	800178c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8001098:	bd10      	pop	{r4, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800109a:	2208      	movs	r2, #8
 800109c:	6999      	ldr	r1, [r3, #24]
 800109e:	430a      	orrs	r2, r1
 80010a0:	619a      	str	r2, [r3, #24]
}
 80010a2:	e7f9      	b.n	8001098 <UART_RxISR_16BIT+0x4c>
 80010a4:	fffffedf 	.word	0xfffffedf

080010a8 <HAL_UART_IRQHandler>:
{
 80010a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80010aa:	6803      	ldr	r3, [r0, #0]
{
 80010ac:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80010ae:	69da      	ldr	r2, [r3, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80010b0:	4850      	ldr	r0, [pc, #320]	; (80011f4 <HAL_UART_IRQHandler+0x14c>)
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80010b2:	6819      	ldr	r1, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80010b4:	689e      	ldr	r6, [r3, #8]
  if (errorflags == 0U)
 80010b6:	4202      	tst	r2, r0
 80010b8:	d10b      	bne.n	80010d2 <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80010ba:	2020      	movs	r0, #32
 80010bc:	4202      	tst	r2, r0
 80010be:	d100      	bne.n	80010c2 <HAL_UART_IRQHandler+0x1a>
 80010c0:	e076      	b.n	80011b0 <HAL_UART_IRQHandler+0x108>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80010c2:	4201      	tst	r1, r0
 80010c4:	d100      	bne.n	80010c8 <HAL_UART_IRQHandler+0x20>
 80010c6:	e073      	b.n	80011b0 <HAL_UART_IRQHandler+0x108>
      if (huart->RxISR != NULL)
 80010c8:	6e23      	ldr	r3, [r4, #96]	; 0x60
      huart->TxISR(huart);
 80010ca:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d165      	bne.n	800119c <HAL_UART_IRQHandler+0xf4>
 80010d0:	e065      	b.n	800119e <HAL_UART_IRQHandler+0xf6>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80010d2:	2001      	movs	r0, #1
 80010d4:	0035      	movs	r5, r6
 80010d6:	4005      	ands	r5, r0
 80010d8:	d103      	bne.n	80010e2 <HAL_UART_IRQHandler+0x3a>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80010da:	2790      	movs	r7, #144	; 0x90
 80010dc:	007f      	lsls	r7, r7, #1
 80010de:	4239      	tst	r1, r7
 80010e0:	d066      	beq.n	80011b0 <HAL_UART_IRQHandler+0x108>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80010e2:	4202      	tst	r2, r0
 80010e4:	d005      	beq.n	80010f2 <HAL_UART_IRQHandler+0x4a>
 80010e6:	05ce      	lsls	r6, r1, #23
 80010e8:	d503      	bpl.n	80010f2 <HAL_UART_IRQHandler+0x4a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80010ea:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80010ec:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 80010ee:	4330      	orrs	r0, r6
 80010f0:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80010f2:	2002      	movs	r0, #2
 80010f4:	4202      	tst	r2, r0
 80010f6:	d006      	beq.n	8001106 <HAL_UART_IRQHandler+0x5e>
 80010f8:	2d00      	cmp	r5, #0
 80010fa:	d004      	beq.n	8001106 <HAL_UART_IRQHandler+0x5e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80010fc:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80010fe:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8001100:	1800      	adds	r0, r0, r0
 8001102:	4330      	orrs	r0, r6
 8001104:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001106:	2004      	movs	r0, #4
 8001108:	4202      	tst	r2, r0
 800110a:	d006      	beq.n	800111a <HAL_UART_IRQHandler+0x72>
 800110c:	2d00      	cmp	r5, #0
 800110e:	d004      	beq.n	800111a <HAL_UART_IRQHandler+0x72>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001110:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001112:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8001114:	3802      	subs	r0, #2
 8001116:	4330      	orrs	r0, r6
 8001118:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 800111a:	0710      	lsls	r0, r2, #28
 800111c:	d508      	bpl.n	8001130 <HAL_UART_IRQHandler+0x88>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800111e:	0688      	lsls	r0, r1, #26
 8001120:	d401      	bmi.n	8001126 <HAL_UART_IRQHandler+0x7e>
 8001122:	2d00      	cmp	r5, #0
 8001124:	d004      	beq.n	8001130 <HAL_UART_IRQHandler+0x88>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001126:	2008      	movs	r0, #8
 8001128:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800112a:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 800112c:	4328      	orrs	r0, r5
 800112e:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001130:	2080      	movs	r0, #128	; 0x80
 8001132:	0100      	lsls	r0, r0, #4
 8001134:	4202      	tst	r2, r0
 8001136:	d006      	beq.n	8001146 <HAL_UART_IRQHandler+0x9e>
 8001138:	014d      	lsls	r5, r1, #5
 800113a:	d504      	bpl.n	8001146 <HAL_UART_IRQHandler+0x9e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800113c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800113e:	2320      	movs	r3, #32
 8001140:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8001142:	4303      	orrs	r3, r0
 8001144:	67e3      	str	r3, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001146:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001148:	2b00      	cmp	r3, #0
 800114a:	d028      	beq.n	800119e <HAL_UART_IRQHandler+0xf6>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800114c:	2320      	movs	r3, #32
 800114e:	421a      	tst	r2, r3
 8001150:	d006      	beq.n	8001160 <HAL_UART_IRQHandler+0xb8>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001152:	4219      	tst	r1, r3
 8001154:	d004      	beq.n	8001160 <HAL_UART_IRQHandler+0xb8>
        if (huart->RxISR != NULL)
 8001156:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <HAL_UART_IRQHandler+0xb8>
          huart->RxISR(huart);
 800115c:	0020      	movs	r0, r4
 800115e:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001160:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8001162:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001164:	689b      	ldr	r3, [r3, #8]
        UART_EndRxTransfer(huart);
 8001166:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001168:	065b      	lsls	r3, r3, #25
 800116a:	d402      	bmi.n	8001172 <HAL_UART_IRQHandler+0xca>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800116c:	2328      	movs	r3, #40	; 0x28
 800116e:	401d      	ands	r5, r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001170:	d01a      	beq.n	80011a8 <HAL_UART_IRQHandler+0x100>
        UART_EndRxTransfer(huart);
 8001172:	f7ff fe31 	bl	8000dd8 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001176:	2140      	movs	r1, #64	; 0x40
 8001178:	6823      	ldr	r3, [r4, #0]
 800117a:	689a      	ldr	r2, [r3, #8]
 800117c:	420a      	tst	r2, r1
 800117e:	d00f      	beq.n	80011a0 <HAL_UART_IRQHandler+0xf8>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001180:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8001182:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001184:	438a      	bics	r2, r1
 8001186:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8001188:	2800      	cmp	r0, #0
 800118a:	d009      	beq.n	80011a0 <HAL_UART_IRQHandler+0xf8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800118c:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <HAL_UART_IRQHandler+0x150>)
 800118e:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001190:	f7ff f986 	bl	80004a0 <HAL_DMA_Abort_IT>
 8001194:	2800      	cmp	r0, #0
 8001196:	d002      	beq.n	800119e <HAL_UART_IRQHandler+0xf6>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001198:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800119a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800119c:	4798      	blx	r3
}
 800119e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 80011a0:	0020      	movs	r0, r4
 80011a2:	f000 faf9 	bl	8001798 <HAL_UART_ErrorCallback>
 80011a6:	e7fa      	b.n	800119e <HAL_UART_IRQHandler+0xf6>
        HAL_UART_ErrorCallback(huart);
 80011a8:	f000 faf6 	bl	8001798 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80011ac:	67e5      	str	r5, [r4, #124]	; 0x7c
 80011ae:	e7f6      	b.n	800119e <HAL_UART_IRQHandler+0xf6>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80011b0:	2080      	movs	r0, #128	; 0x80
 80011b2:	0340      	lsls	r0, r0, #13
 80011b4:	4202      	tst	r2, r0
 80011b6:	d006      	beq.n	80011c6 <HAL_UART_IRQHandler+0x11e>
 80011b8:	0275      	lsls	r5, r6, #9
 80011ba:	d504      	bpl.n	80011c6 <HAL_UART_IRQHandler+0x11e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80011bc:	6218      	str	r0, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80011be:	0020      	movs	r0, r4
 80011c0:	f000 fa0a 	bl	80015d8 <HAL_UARTEx_WakeupCallback>
    return;
 80011c4:	e7eb      	b.n	800119e <HAL_UART_IRQHandler+0xf6>
  if (((isrflags & USART_ISR_TXE) != 0U)
 80011c6:	2080      	movs	r0, #128	; 0x80
 80011c8:	4202      	tst	r2, r0
 80011ca:	d003      	beq.n	80011d4 <HAL_UART_IRQHandler+0x12c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80011cc:	4201      	tst	r1, r0
 80011ce:	d001      	beq.n	80011d4 <HAL_UART_IRQHandler+0x12c>
    if (huart->TxISR != NULL)
 80011d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80011d2:	e77a      	b.n	80010ca <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80011d4:	2040      	movs	r0, #64	; 0x40
 80011d6:	4202      	tst	r2, r0
 80011d8:	d0e1      	beq.n	800119e <HAL_UART_IRQHandler+0xf6>
 80011da:	4201      	tst	r1, r0
 80011dc:	d0df      	beq.n	800119e <HAL_UART_IRQHandler+0xf6>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4382      	bics	r2, r0
 80011e2:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80011e4:	2320      	movs	r3, #32
 80011e6:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 80011e8:	2300      	movs	r3, #0
  HAL_UART_TxCpltCallback(huart);
 80011ea:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 80011ec:	6663      	str	r3, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 80011ee:	f000 fac7 	bl	8001780 <HAL_UART_TxCpltCallback>
 80011f2:	e7d4      	b.n	800119e <HAL_UART_IRQHandler+0xf6>
 80011f4:	0000080f 	.word	0x0000080f
 80011f8:	080011fd 	.word	0x080011fd

080011fc <UART_DMAAbortOnError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80011fc:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 80011fe:	2300      	movs	r3, #0
 8001200:	0002      	movs	r2, r0
{
 8001202:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8001204:	325a      	adds	r2, #90	; 0x5a
 8001206:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8001208:	3a08      	subs	r2, #8
 800120a:	8013      	strh	r3, [r2, #0]
  HAL_UART_ErrorCallback(huart);
 800120c:	f000 fac4 	bl	8001798 <HAL_UART_ErrorCallback>
}
 8001210:	bd10      	pop	{r4, pc}
	...

08001214 <UART_SetConfig>:
{
 8001214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001216:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001218:	6925      	ldr	r5, [r4, #16]
 800121a:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800121c:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800121e:	432a      	orrs	r2, r5
 8001220:	6965      	ldr	r5, [r4, #20]
 8001222:	69c1      	ldr	r1, [r0, #28]
 8001224:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001226:	6818      	ldr	r0, [r3, #0]
 8001228:	4d56      	ldr	r5, [pc, #344]	; (8001384 <UART_SetConfig+0x170>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800122a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800122c:	4028      	ands	r0, r5
 800122e:	4302      	orrs	r2, r0
 8001230:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001232:	685a      	ldr	r2, [r3, #4]
 8001234:	4854      	ldr	r0, [pc, #336]	; (8001388 <UART_SetConfig+0x174>)
  tmpreg |= huart->Init.OneBitSampling;
 8001236:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001238:	4002      	ands	r2, r0
 800123a:	68e0      	ldr	r0, [r4, #12]
 800123c:	4302      	orrs	r2, r0
 800123e:	605a      	str	r2, [r3, #4]
  tmpreg |= huart->Init.OneBitSampling;
 8001240:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001242:	6898      	ldr	r0, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8001244:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001246:	4d51      	ldr	r5, [pc, #324]	; (800138c <UART_SetConfig+0x178>)
 8001248:	4028      	ands	r0, r5
 800124a:	4302      	orrs	r2, r0
 800124c:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800124e:	4a50      	ldr	r2, [pc, #320]	; (8001390 <UART_SetConfig+0x17c>)
 8001250:	4d50      	ldr	r5, [pc, #320]	; (8001394 <UART_SetConfig+0x180>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d113      	bne.n	800127e <UART_SetConfig+0x6a>
 8001256:	2203      	movs	r2, #3
 8001258:	4b4f      	ldr	r3, [pc, #316]	; (8001398 <UART_SetConfig+0x184>)
 800125a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125c:	4013      	ands	r3, r2
 800125e:	4a4f      	ldr	r2, [pc, #316]	; (800139c <UART_SetConfig+0x188>)
 8001260:	5cd0      	ldrb	r0, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001262:	2380      	movs	r3, #128	; 0x80
 8001264:	021b      	lsls	r3, r3, #8
 8001266:	4299      	cmp	r1, r3
 8001268:	d155      	bne.n	8001316 <UART_SetConfig+0x102>
    switch (clocksource)
 800126a:	2808      	cmp	r0, #8
 800126c:	d900      	bls.n	8001270 <UART_SetConfig+0x5c>
 800126e:	e086      	b.n	800137e <UART_SetConfig+0x16a>
 8001270:	f7fe ff54 	bl	800011c <__gnu_thumb1_case_uqi>
 8001274:	85278541 	.word	0x85278541
 8001278:	85858580 	.word	0x85858580
 800127c:	79          	.byte	0x79
 800127d:	00          	.byte	0x00
 800127e:	2280      	movs	r2, #128	; 0x80
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001280:	4847      	ldr	r0, [pc, #284]	; (80013a0 <UART_SetConfig+0x18c>)
 8001282:	0212      	lsls	r2, r2, #8
 8001284:	4283      	cmp	r3, r0
 8001286:	d12e      	bne.n	80012e6 <UART_SetConfig+0xd2>
 8001288:	20c0      	movs	r0, #192	; 0xc0
 800128a:	2680      	movs	r6, #128	; 0x80
 800128c:	4b42      	ldr	r3, [pc, #264]	; (8001398 <UART_SetConfig+0x184>)
 800128e:	0280      	lsls	r0, r0, #10
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	0276      	lsls	r6, r6, #9
 8001294:	4003      	ands	r3, r0
 8001296:	42b3      	cmp	r3, r6
 8001298:	d100      	bne.n	800129c <UART_SetConfig+0x88>
 800129a:	e069      	b.n	8001370 <UART_SetConfig+0x15c>
 800129c:	0017      	movs	r7, r2
 800129e:	42b3      	cmp	r3, r6
 80012a0:	d807      	bhi.n	80012b2 <UART_SetConfig+0x9e>
 80012a2:	2000      	movs	r0, #0
 80012a4:	4283      	cmp	r3, r0
 80012a6:	d0dc      	beq.n	8001262 <UART_SetConfig+0x4e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80012a8:	42b9      	cmp	r1, r7
 80012aa:	d068      	beq.n	800137e <UART_SetConfig+0x16a>
        ret = HAL_ERROR;
 80012ac:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 80012ae:	2300      	movs	r3, #0
 80012b0:	e048      	b.n	8001344 <UART_SetConfig+0x130>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80012b2:	2680      	movs	r6, #128	; 0x80
 80012b4:	02b6      	lsls	r6, r6, #10
 80012b6:	42b3      	cmp	r3, r6
 80012b8:	d053      	beq.n	8001362 <UART_SetConfig+0x14e>
 80012ba:	4283      	cmp	r3, r0
 80012bc:	d1f4      	bne.n	80012a8 <UART_SetConfig+0x94>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80012be:	4291      	cmp	r1, r2
 80012c0:	d137      	bne.n	8001332 <UART_SetConfig+0x11e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80012c2:	6863      	ldr	r3, [r4, #4]
 80012c4:	0858      	lsrs	r0, r3, #1
 80012c6:	4b37      	ldr	r3, [pc, #220]	; (80013a4 <UART_SetConfig+0x190>)
 80012c8:	18c0      	adds	r0, r0, r3
 80012ca:	6861      	ldr	r1, [r4, #4]
 80012cc:	f7fe ff30 	bl	8000130 <__udivsi3>
 80012d0:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80012d2:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80012d4:	001a      	movs	r2, r3
 80012d6:	3a10      	subs	r2, #16
 80012d8:	42aa      	cmp	r2, r5
 80012da:	d912      	bls.n	8001302 <UART_SetConfig+0xee>
      ret = HAL_ERROR;
 80012dc:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 80012e2:	6663      	str	r3, [r4, #100]	; 0x64
}
 80012e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80012e6:	4830      	ldr	r0, [pc, #192]	; (80013a8 <UART_SetConfig+0x194>)
 80012e8:	4283      	cmp	r3, r0
 80012ea:	d002      	beq.n	80012f2 <UART_SetConfig+0xde>
 80012ec:	482f      	ldr	r0, [pc, #188]	; (80013ac <UART_SetConfig+0x198>)
 80012ee:	4283      	cmp	r3, r0
 80012f0:	d143      	bne.n	800137a <UART_SetConfig+0x166>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80012f2:	4291      	cmp	r1, r2
 80012f4:	d118      	bne.n	8001328 <UART_SetConfig+0x114>
        pclk = HAL_RCC_GetPCLK1Freq();
 80012f6:	f7ff fd5f 	bl	8000db8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80012fa:	6863      	ldr	r3, [r4, #4]
 80012fc:	0040      	lsls	r0, r0, #1
 80012fe:	085b      	lsrs	r3, r3, #1
 8001300:	e7e2      	b.n	80012c8 <UART_SetConfig+0xb4>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001302:	220f      	movs	r2, #15
 8001304:	0019      	movs	r1, r3
 8001306:	4391      	bics	r1, r2
 8001308:	000a      	movs	r2, r1
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800130a:	071b      	lsls	r3, r3, #28
      huart->Instance->BRR = brrtemp;
 800130c:	6821      	ldr	r1, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800130e:	0f5b      	lsrs	r3, r3, #29
      huart->Instance->BRR = brrtemp;
 8001310:	4313      	orrs	r3, r2
 8001312:	60cb      	str	r3, [r1, #12]
 8001314:	e7e3      	b.n	80012de <UART_SetConfig+0xca>
    switch (clocksource)
 8001316:	2808      	cmp	r0, #8
 8001318:	d8c8      	bhi.n	80012ac <UART_SetConfig+0x98>
 800131a:	f7fe fef5 	bl	8000108 <__gnu_thumb1_case_sqi>
 800131e:	c705      	.short	0xc705
 8001320:	c71ac70a 	.word	0xc71ac70a
 8001324:	c7c7      	.short	0xc7c7
 8001326:	1d          	.byte	0x1d
 8001327:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 8001328:	f7ff fd46 	bl	8000db8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800132c:	6863      	ldr	r3, [r4, #4]
 800132e:	085b      	lsrs	r3, r3, #1
 8001330:	e002      	b.n	8001338 <UART_SetConfig+0x124>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001332:	6863      	ldr	r3, [r4, #4]
 8001334:	0858      	lsrs	r0, r3, #1
 8001336:	4b1e      	ldr	r3, [pc, #120]	; (80013b0 <UART_SetConfig+0x19c>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001338:	18c0      	adds	r0, r0, r3
 800133a:	6861      	ldr	r1, [r4, #4]
 800133c:	f7fe fef8 	bl	8000130 <__udivsi3>
 8001340:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8001342:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001344:	001a      	movs	r2, r3
 8001346:	3a10      	subs	r2, #16
 8001348:	42aa      	cmp	r2, r5
 800134a:	d8c7      	bhi.n	80012dc <UART_SetConfig+0xc8>
      huart->Instance->BRR = usartdiv;
 800134c:	6822      	ldr	r2, [r4, #0]
 800134e:	60d3      	str	r3, [r2, #12]
 8001350:	e7c5      	b.n	80012de <UART_SetConfig+0xca>
        pclk = HAL_RCC_GetSysClockFreq();
 8001352:	f7ff fc63 	bl	8000c1c <HAL_RCC_GetSysClockFreq>
 8001356:	e7e9      	b.n	800132c <UART_SetConfig+0x118>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001358:	6863      	ldr	r3, [r4, #4]
 800135a:	0858      	lsrs	r0, r3, #1
 800135c:	2380      	movs	r3, #128	; 0x80
 800135e:	021b      	lsls	r3, r3, #8
 8001360:	e7ea      	b.n	8001338 <UART_SetConfig+0x124>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001362:	4291      	cmp	r1, r2
 8001364:	d1f8      	bne.n	8001358 <UART_SetConfig+0x144>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001366:	6863      	ldr	r3, [r4, #4]
 8001368:	0858      	lsrs	r0, r3, #1
 800136a:	2380      	movs	r3, #128	; 0x80
 800136c:	025b      	lsls	r3, r3, #9
 800136e:	e7ab      	b.n	80012c8 <UART_SetConfig+0xb4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001370:	4291      	cmp	r1, r2
 8001372:	d1ee      	bne.n	8001352 <UART_SetConfig+0x13e>
        pclk = HAL_RCC_GetSysClockFreq();
 8001374:	f7ff fc52 	bl	8000c1c <HAL_RCC_GetSysClockFreq>
 8001378:	e7bf      	b.n	80012fa <UART_SetConfig+0xe6>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800137a:	4291      	cmp	r1, r2
 800137c:	d196      	bne.n	80012ac <UART_SetConfig+0x98>
        ret = HAL_ERROR;
 800137e:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001380:	2300      	movs	r3, #0
 8001382:	e7a7      	b.n	80012d4 <UART_SetConfig+0xc0>
 8001384:	efff69f3 	.word	0xefff69f3
 8001388:	ffffcfff 	.word	0xffffcfff
 800138c:	fffff4ff 	.word	0xfffff4ff
 8001390:	40013800 	.word	0x40013800
 8001394:	0000ffef 	.word	0x0000ffef
 8001398:	40021000 	.word	0x40021000
 800139c:	08001950 	.word	0x08001950
 80013a0:	40004400 	.word	0x40004400
 80013a4:	00f42400 	.word	0x00f42400
 80013a8:	40004800 	.word	0x40004800
 80013ac:	40004c00 	.word	0x40004c00
 80013b0:	007a1200 	.word	0x007a1200

080013b4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80013b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80013b6:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80013b8:	07da      	lsls	r2, r3, #31
 80013ba:	d506      	bpl.n	80013ca <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80013bc:	6801      	ldr	r1, [r0, #0]
 80013be:	4c28      	ldr	r4, [pc, #160]	; (8001460 <UART_AdvFeatureConfig+0xac>)
 80013c0:	684a      	ldr	r2, [r1, #4]
 80013c2:	4022      	ands	r2, r4
 80013c4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80013c6:	4322      	orrs	r2, r4
 80013c8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80013ca:	079a      	lsls	r2, r3, #30
 80013cc:	d506      	bpl.n	80013dc <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80013ce:	6801      	ldr	r1, [r0, #0]
 80013d0:	4c24      	ldr	r4, [pc, #144]	; (8001464 <UART_AdvFeatureConfig+0xb0>)
 80013d2:	684a      	ldr	r2, [r1, #4]
 80013d4:	4022      	ands	r2, r4
 80013d6:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80013d8:	4322      	orrs	r2, r4
 80013da:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80013dc:	075a      	lsls	r2, r3, #29
 80013de:	d506      	bpl.n	80013ee <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80013e0:	6801      	ldr	r1, [r0, #0]
 80013e2:	4c21      	ldr	r4, [pc, #132]	; (8001468 <UART_AdvFeatureConfig+0xb4>)
 80013e4:	684a      	ldr	r2, [r1, #4]
 80013e6:	4022      	ands	r2, r4
 80013e8:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80013ea:	4322      	orrs	r2, r4
 80013ec:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80013ee:	071a      	lsls	r2, r3, #28
 80013f0:	d506      	bpl.n	8001400 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80013f2:	6801      	ldr	r1, [r0, #0]
 80013f4:	4c1d      	ldr	r4, [pc, #116]	; (800146c <UART_AdvFeatureConfig+0xb8>)
 80013f6:	684a      	ldr	r2, [r1, #4]
 80013f8:	4022      	ands	r2, r4
 80013fa:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80013fc:	4322      	orrs	r2, r4
 80013fe:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001400:	06da      	lsls	r2, r3, #27
 8001402:	d506      	bpl.n	8001412 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001404:	6801      	ldr	r1, [r0, #0]
 8001406:	4c1a      	ldr	r4, [pc, #104]	; (8001470 <UART_AdvFeatureConfig+0xbc>)
 8001408:	688a      	ldr	r2, [r1, #8]
 800140a:	4022      	ands	r2, r4
 800140c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800140e:	4322      	orrs	r2, r4
 8001410:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001412:	069a      	lsls	r2, r3, #26
 8001414:	d506      	bpl.n	8001424 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001416:	6801      	ldr	r1, [r0, #0]
 8001418:	4c16      	ldr	r4, [pc, #88]	; (8001474 <UART_AdvFeatureConfig+0xc0>)
 800141a:	688a      	ldr	r2, [r1, #8]
 800141c:	4022      	ands	r2, r4
 800141e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001420:	4322      	orrs	r2, r4
 8001422:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001424:	065a      	lsls	r2, r3, #25
 8001426:	d510      	bpl.n	800144a <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001428:	6801      	ldr	r1, [r0, #0]
 800142a:	4d13      	ldr	r5, [pc, #76]	; (8001478 <UART_AdvFeatureConfig+0xc4>)
 800142c:	684a      	ldr	r2, [r1, #4]
 800142e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001430:	402a      	ands	r2, r5
 8001432:	4322      	orrs	r2, r4
 8001434:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001436:	2280      	movs	r2, #128	; 0x80
 8001438:	0352      	lsls	r2, r2, #13
 800143a:	4294      	cmp	r4, r2
 800143c:	d105      	bne.n	800144a <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800143e:	684a      	ldr	r2, [r1, #4]
 8001440:	4c0e      	ldr	r4, [pc, #56]	; (800147c <UART_AdvFeatureConfig+0xc8>)
 8001442:	4022      	ands	r2, r4
 8001444:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001446:	4322      	orrs	r2, r4
 8001448:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800144a:	061b      	lsls	r3, r3, #24
 800144c:	d506      	bpl.n	800145c <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800144e:	6802      	ldr	r2, [r0, #0]
 8001450:	490b      	ldr	r1, [pc, #44]	; (8001480 <UART_AdvFeatureConfig+0xcc>)
 8001452:	6853      	ldr	r3, [r2, #4]
 8001454:	400b      	ands	r3, r1
 8001456:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001458:	430b      	orrs	r3, r1
 800145a:	6053      	str	r3, [r2, #4]
}
 800145c:	bd30      	pop	{r4, r5, pc}
 800145e:	46c0      	nop			; (mov r8, r8)
 8001460:	fffdffff 	.word	0xfffdffff
 8001464:	fffeffff 	.word	0xfffeffff
 8001468:	fffbffff 	.word	0xfffbffff
 800146c:	ffff7fff 	.word	0xffff7fff
 8001470:	ffffefff 	.word	0xffffefff
 8001474:	ffffdfff 	.word	0xffffdfff
 8001478:	ffefffff 	.word	0xffefffff
 800147c:	ff9fffff 	.word	0xff9fffff
 8001480:	fff7ffff 	.word	0xfff7ffff

08001484 <UART_WaitOnFlagUntilTimeout>:
{
 8001484:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001486:	2780      	movs	r7, #128	; 0x80
{
 8001488:	0004      	movs	r4, r0
 800148a:	000e      	movs	r6, r1
 800148c:	0015      	movs	r5, r2
 800148e:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001490:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001492:	6822      	ldr	r2, [r4, #0]
 8001494:	69d3      	ldr	r3, [r2, #28]
 8001496:	4033      	ands	r3, r6
 8001498:	1b9b      	subs	r3, r3, r6
 800149a:	4259      	negs	r1, r3
 800149c:	414b      	adcs	r3, r1
 800149e:	42ab      	cmp	r3, r5
 80014a0:	d001      	beq.n	80014a6 <UART_WaitOnFlagUntilTimeout+0x22>
  return HAL_OK;
 80014a2:	2000      	movs	r0, #0
 80014a4:	e01c      	b.n	80014e0 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 80014a6:	9b08      	ldr	r3, [sp, #32]
 80014a8:	3301      	adds	r3, #1
 80014aa:	d0f3      	beq.n	8001494 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014ac:	f7fe ff80 	bl	80003b0 <HAL_GetTick>
 80014b0:	9b01      	ldr	r3, [sp, #4]
 80014b2:	9a08      	ldr	r2, [sp, #32]
 80014b4:	1ac0      	subs	r0, r0, r3
 80014b6:	6823      	ldr	r3, [r4, #0]
 80014b8:	4290      	cmp	r0, r2
 80014ba:	d801      	bhi.n	80014c0 <UART_WaitOnFlagUntilTimeout+0x3c>
 80014bc:	2a00      	cmp	r2, #0
 80014be:	d110      	bne.n	80014e2 <UART_WaitOnFlagUntilTimeout+0x5e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	4913      	ldr	r1, [pc, #76]	; (8001510 <UART_WaitOnFlagUntilTimeout+0x8c>)
 80014c4:	400a      	ands	r2, r1
 80014c6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80014c8:	689a      	ldr	r2, [r3, #8]
 80014ca:	31a3      	adds	r1, #163	; 0xa3
 80014cc:	31ff      	adds	r1, #255	; 0xff
 80014ce:	438a      	bics	r2, r1
 80014d0:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80014d2:	2320      	movs	r3, #32
 80014d4:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80014d6:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 80014d8:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 80014da:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 80014dc:	3470      	adds	r4, #112	; 0x70
 80014de:	7023      	strb	r3, [r4, #0]
}
 80014e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80014e2:	2104      	movs	r1, #4
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	420a      	tst	r2, r1
 80014e8:	d0d3      	beq.n	8001492 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80014ea:	69da      	ldr	r2, [r3, #28]
 80014ec:	423a      	tst	r2, r7
 80014ee:	d0d0      	beq.n	8001492 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80014f0:	621f      	str	r7, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4906      	ldr	r1, [pc, #24]	; (8001510 <UART_WaitOnFlagUntilTimeout+0x8c>)
 80014f6:	400a      	ands	r2, r1
 80014f8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	31a3      	adds	r1, #163	; 0xa3
 80014fe:	31ff      	adds	r1, #255	; 0xff
 8001500:	438a      	bics	r2, r1
 8001502:	609a      	str	r2, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8001504:	2320      	movs	r3, #32
 8001506:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8001508:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800150a:	67e3      	str	r3, [r4, #124]	; 0x7c
 800150c:	e7e4      	b.n	80014d8 <UART_WaitOnFlagUntilTimeout+0x54>
 800150e:	46c0      	nop			; (mov r8, r8)
 8001510:	fffffe5f 	.word	0xfffffe5f

08001514 <UART_CheckIdleState>:
{
 8001514:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001516:	2600      	movs	r6, #0
{
 8001518:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800151a:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 800151c:	f7fe ff48 	bl	80003b0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001520:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001522:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	071b      	lsls	r3, r3, #28
 8001528:	d415      	bmi.n	8001556 <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800152a:	6823      	ldr	r3, [r4, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	075b      	lsls	r3, r3, #29
 8001530:	d50a      	bpl.n	8001548 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001532:	2180      	movs	r1, #128	; 0x80
 8001534:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <UART_CheckIdleState+0x5c>)
 8001536:	2200      	movs	r2, #0
 8001538:	9300      	str	r3, [sp, #0]
 800153a:	03c9      	lsls	r1, r1, #15
 800153c:	002b      	movs	r3, r5
 800153e:	0020      	movs	r0, r4
 8001540:	f7ff ffa0 	bl	8001484 <UART_WaitOnFlagUntilTimeout>
 8001544:	2800      	cmp	r0, #0
 8001546:	d111      	bne.n	800156c <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8001548:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800154a:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800154c:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800154e:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8001550:	3470      	adds	r4, #112	; 0x70
 8001552:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8001554:	e00b      	b.n	800156e <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001556:	2180      	movs	r1, #128	; 0x80
 8001558:	4b05      	ldr	r3, [pc, #20]	; (8001570 <UART_CheckIdleState+0x5c>)
 800155a:	0032      	movs	r2, r6
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	0389      	lsls	r1, r1, #14
 8001560:	0003      	movs	r3, r0
 8001562:	0020      	movs	r0, r4
 8001564:	f7ff ff8e 	bl	8001484 <UART_WaitOnFlagUntilTimeout>
 8001568:	2800      	cmp	r0, #0
 800156a:	d0de      	beq.n	800152a <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800156c:	2003      	movs	r0, #3
}
 800156e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8001570:	01ffffff 	.word	0x01ffffff

08001574 <HAL_UART_Init>:
{
 8001574:	b510      	push	{r4, lr}
 8001576:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8001578:	d101      	bne.n	800157e <HAL_UART_Init+0xa>
    return HAL_ERROR;
 800157a:	2001      	movs	r0, #1
}
 800157c:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 800157e:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001580:	2b00      	cmp	r3, #0
 8001582:	d104      	bne.n	800158e <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8001584:	0002      	movs	r2, r0
 8001586:	3270      	adds	r2, #112	; 0x70
 8001588:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 800158a:	f000 f913 	bl	80017b4 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800158e:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001590:	2101      	movs	r1, #1
 8001592:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001594:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8001596:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001598:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 800159a:	438b      	bics	r3, r1
 800159c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800159e:	f7ff fe39 	bl	8001214 <UART_SetConfig>
 80015a2:	2801      	cmp	r0, #1
 80015a4:	d0e9      	beq.n	800157a <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80015a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d002      	beq.n	80015b2 <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 80015ac:	0020      	movs	r0, r4
 80015ae:	f7ff ff01 	bl	80013b4 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80015b2:	6823      	ldr	r3, [r4, #0]
 80015b4:	4907      	ldr	r1, [pc, #28]	; (80015d4 <HAL_UART_Init+0x60>)
 80015b6:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80015b8:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80015ba:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80015bc:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80015be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80015c0:	689a      	ldr	r2, [r3, #8]
 80015c2:	438a      	bics	r2, r1
 80015c4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80015c6:	2201      	movs	r2, #1
 80015c8:	6819      	ldr	r1, [r3, #0]
 80015ca:	430a      	orrs	r2, r1
 80015cc:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80015ce:	f7ff ffa1 	bl	8001514 <UART_CheckIdleState>
 80015d2:	e7d3      	b.n	800157c <HAL_UART_Init+0x8>
 80015d4:	ffffb7ff 	.word	0xffffb7ff

080015d8 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80015d8:	4770      	bx	lr
	...

080015dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015dc:	480d      	ldr	r0, [pc, #52]	; (8001614 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015de:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80015e0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80015e2:	e003      	b.n	80015ec <LoopCopyDataInit>

080015e4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80015e4:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80015e6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80015e8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80015ea:	3104      	adds	r1, #4

080015ec <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80015ec:	480b      	ldr	r0, [pc, #44]	; (800161c <LoopForever+0xa>)
  ldr r3, =_edata
 80015ee:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <LoopForever+0xe>)
  adds r2, r0, r1
 80015f0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80015f2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80015f4:	d3f6      	bcc.n	80015e4 <CopyDataInit>
  ldr r2, =_sbss
 80015f6:	4a0b      	ldr	r2, [pc, #44]	; (8001624 <LoopForever+0x12>)
  b LoopFillZerobss
 80015f8:	e002      	b.n	8001600 <LoopFillZerobss>

080015fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80015fa:	2300      	movs	r3, #0
  str  r3, [r2]
 80015fc:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015fe:	3204      	adds	r2, #4

08001600 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8001600:	4b09      	ldr	r3, [pc, #36]	; (8001628 <LoopForever+0x16>)
  cmp r2, r3
 8001602:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001604:	d3f9      	bcc.n	80015fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001606:	f7fe fe63 	bl	80002d0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800160a:	f000 f94b 	bl	80018a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800160e:	f000 f83d 	bl	800168c <main>

08001612 <LoopForever>:

LoopForever:
    b LoopForever
 8001612:	e7fe      	b.n	8001612 <LoopForever>
  ldr   r0, =_estack
 8001614:	20004000 	.word	0x20004000
  ldr r3, =_sidata
 8001618:	0800195c 	.word	0x0800195c
  ldr r0, =_sdata
 800161c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001620:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8001624:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001628:	20000174 	.word	0x20000174

0800162c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800162c:	e7fe      	b.n	800162c <ADC1_COMP_IRQHandler>

0800162e <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 800162e:	b510      	push	{r4, lr}
  /* Turn LED2 on */
  BSP_LED_On(LED2);
 8001630:	2000      	movs	r0, #0
  while(1)
  {
    /* Error if LED2 is slowly blinking (1 sec. period) */
    BSP_LED_Toggle(LED2); 
    HAL_Delay(1000); 
 8001632:	24fa      	movs	r4, #250	; 0xfa
  BSP_LED_On(LED2);
 8001634:	f7fe fe2a 	bl	800028c <BSP_LED_On>
    HAL_Delay(1000); 
 8001638:	00a4      	lsls	r4, r4, #2
    BSP_LED_Toggle(LED2); 
 800163a:	2000      	movs	r0, #0
 800163c:	f7fe fe3e 	bl	80002bc <BSP_LED_Toggle>
    HAL_Delay(1000); 
 8001640:	0020      	movs	r0, r4
 8001642:	f7fe febb 	bl	80003bc <HAL_Delay>
 8001646:	e7f8      	b.n	800163a <Error_Handler+0xc>

08001648 <SystemClock_Config>:
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8001648:	2320      	movs	r3, #32
{
 800164a:	b530      	push	{r4, r5, lr}
 800164c:	b093      	sub	sp, #76	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 800164e:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI48;
 8001650:	23c0      	movs	r3, #192	; 0xc0
 8001652:	025b      	lsls	r3, r3, #9
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001654:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001656:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI48;
 8001658:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800165a:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 800165c:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800165e:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001660:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8001662:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001664:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 8001666:	f7ff f889 	bl	800077c <HAL_RCC_OscConfig>
 800166a:	2800      	cmp	r0, #0
 800166c:	d000      	beq.n	8001670 <SystemClock_Config+0x28>
 800166e:	e7fe      	b.n	800166e <SystemClock_Config+0x26>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 8001670:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001672:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001674:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1)!= HAL_OK)
 8001676:	0021      	movs	r1, r4
 8001678:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 800167a:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800167c:	9502      	str	r5, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1)!= HAL_OK)
 800167e:	f7ff fb0f 	bl	8000ca0 <HAL_RCC_ClockConfig>
 8001682:	2800      	cmp	r0, #0
 8001684:	d000      	beq.n	8001688 <SystemClock_Config+0x40>
 8001686:	e7fe      	b.n	8001686 <SystemClock_Config+0x3e>
}
 8001688:	b013      	add	sp, #76	; 0x4c
 800168a:	bd30      	pop	{r4, r5, pc}

0800168c <main>:
{
 800168c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_Init();
 800168e:	f7fe fe73 	bl	8000378 <HAL_Init>
  SystemClock_Config();
 8001692:	f7ff ffd9 	bl	8001648 <SystemClock_Config>
  BSP_LED_Init(LED2);
 8001696:	2000      	movs	r0, #0
 8001698:	f7fe fdd6 	bl	8000248 <BSP_LED_Init>
  UartHandle.Instance        = USARTx;
 800169c:	4c32      	ldr	r4, [pc, #200]	; (8001768 <main+0xdc>)
 800169e:	4b33      	ldr	r3, [pc, #204]	; (800176c <main+0xe0>)
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 80016a0:	220c      	movs	r2, #12
  UartHandle.Instance        = USARTx;
 80016a2:	6023      	str	r3, [r4, #0]
  UartHandle.Init.BaudRate   = 9600;
 80016a4:	2396      	movs	r3, #150	; 0x96
 80016a6:	019b      	lsls	r3, r3, #6
 80016a8:	6063      	str	r3, [r4, #4]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 80016aa:	2300      	movs	r3, #0
  if(HAL_UART_DeInit(&UartHandle) != HAL_OK)
 80016ac:	0020      	movs	r0, r4
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 80016ae:	60a3      	str	r3, [r4, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 80016b0:	60e3      	str	r3, [r4, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 80016b2:	6123      	str	r3, [r4, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80016b4:	61a3      	str	r3, [r4, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 80016b6:	6162      	str	r2, [r4, #20]
  UartHandle.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT; 
 80016b8:	6263      	str	r3, [r4, #36]	; 0x24
  if(HAL_UART_DeInit(&UartHandle) != HAL_OK)
 80016ba:	f7ff fbdb 	bl	8000e74 <HAL_UART_DeInit>
 80016be:	2800      	cmp	r0, #0
 80016c0:	d001      	beq.n	80016c6 <main+0x3a>
    Error_Handler();
 80016c2:	f7ff ffb4 	bl	800162e <Error_Handler>
  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 80016c6:	0020      	movs	r0, r4
 80016c8:	f7ff ff54 	bl	8001574 <HAL_UART_Init>
 80016cc:	2800      	cmp	r0, #0
 80016ce:	d1f8      	bne.n	80016c2 <main+0x36>
  if(HAL_UART_Receive_IT(&UartHandle, (uint8_t *)aRxBuffer, RXBUFFERSIZE) != HAL_OK)
 80016d0:	4d27      	ldr	r5, [pc, #156]	; (8001770 <main+0xe4>)
 80016d2:	225a      	movs	r2, #90	; 0x5a
 80016d4:	0029      	movs	r1, r5
 80016d6:	0020      	movs	r0, r4
 80016d8:	f7ff fc24 	bl	8000f24 <HAL_UART_Receive_IT>
 80016dc:	2800      	cmp	r0, #0
 80016de:	d1f0      	bne.n	80016c2 <main+0x36>
      HAL_Delay(500); 
 80016e0:	26fa      	movs	r6, #250	; 0xfa
 80016e2:	0076      	lsls	r6, r6, #1
  while (UartReady != SET)
 80016e4:	4f23      	ldr	r7, [pc, #140]	; (8001774 <main+0xe8>)
      BSP_LED_On(LED2); 
 80016e6:	2000      	movs	r0, #0
  while (UartReady != SET)
 80016e8:	783b      	ldrb	r3, [r7, #0]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d119      	bne.n	8001722 <main+0x96>
  UartReady = RESET;
 80016ee:	7038      	strb	r0, [r7, #0]
  BSP_LED_Off(LED2); 
 80016f0:	f7fe fdd8 	bl	80002a4 <BSP_LED_Off>
  if(HAL_UART_Transmit_IT(&UartHandle, (uint8_t*)aTxBuffer, TXBUFFERSIZE)!= HAL_OK)
 80016f4:	4e20      	ldr	r6, [pc, #128]	; (8001778 <main+0xec>)
 80016f6:	225a      	movs	r2, #90	; 0x5a
 80016f8:	0031      	movs	r1, r6
 80016fa:	0020      	movs	r0, r4
 80016fc:	f7ff fbd4 	bl	8000ea8 <HAL_UART_Transmit_IT>
 8001700:	2800      	cmp	r0, #0
 8001702:	d1de      	bne.n	80016c2 <main+0x36>
  while (UartReady != SET)
 8001704:	783b      	ldrb	r3, [r7, #0]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d1fc      	bne.n	8001704 <main+0x78>
  UartReady = RESET;
 800170a:	2300      	movs	r3, #0
 800170c:	225a      	movs	r2, #90	; 0x5a
  while (BufferLength--)
 800170e:	491b      	ldr	r1, [pc, #108]	; (800177c <main+0xf0>)
  UartReady = RESET;
 8001710:	703b      	strb	r3, [r7, #0]
  while (BufferLength--)
 8001712:	3a01      	subs	r2, #1
 8001714:	b292      	uxth	r2, r2
 8001716:	428a      	cmp	r2, r1
 8001718:	d11b      	bne.n	8001752 <main+0xc6>
  BSP_LED_On(LED2); 
 800171a:	2000      	movs	r0, #0
 800171c:	f7fe fdb6 	bl	800028c <BSP_LED_On>
 8001720:	e7fe      	b.n	8001720 <main+0x94>
      BSP_LED_On(LED2); 
 8001722:	f7fe fdb3 	bl	800028c <BSP_LED_On>
      HAL_Delay(100);
 8001726:	2064      	movs	r0, #100	; 0x64
 8001728:	f7fe fe48 	bl	80003bc <HAL_Delay>
      BSP_LED_Off(LED2); 
 800172c:	2000      	movs	r0, #0
 800172e:	f7fe fdb9 	bl	80002a4 <BSP_LED_Off>
      HAL_Delay(100);
 8001732:	2064      	movs	r0, #100	; 0x64
 8001734:	f7fe fe42 	bl	80003bc <HAL_Delay>
      BSP_LED_On(LED2); 
 8001738:	2000      	movs	r0, #0
 800173a:	f7fe fda7 	bl	800028c <BSP_LED_On>
      HAL_Delay(100);
 800173e:	2064      	movs	r0, #100	; 0x64
 8001740:	f7fe fe3c 	bl	80003bc <HAL_Delay>
      BSP_LED_Off(LED2); 
 8001744:	2000      	movs	r0, #0
 8001746:	f7fe fdad 	bl	80002a4 <BSP_LED_Off>
      HAL_Delay(500); 
 800174a:	0030      	movs	r0, r6
 800174c:	f7fe fe36 	bl	80003bc <HAL_Delay>
 8001750:	e7c8      	b.n	80016e4 <main+0x58>
 8001752:	1c58      	adds	r0, r3, #1
    if ((*pBuffer1) != *pBuffer2)
 8001754:	5cf4      	ldrb	r4, [r6, r3]
 8001756:	5ceb      	ldrb	r3, [r5, r3]
 8001758:	429c      	cmp	r4, r3
 800175a:	d101      	bne.n	8001760 <main+0xd4>
 800175c:	0003      	movs	r3, r0
 800175e:	e7d8      	b.n	8001712 <main+0x86>
  if(Buffercmp((uint8_t*)aTxBuffer,(uint8_t*)aRxBuffer,RXBUFFERSIZE))
 8001760:	2a00      	cmp	r2, #0
 8001762:	d1ae      	bne.n	80016c2 <main+0x36>
 8001764:	e7d9      	b.n	800171a <main+0x8e>
 8001766:	46c0      	nop			; (mov r8, r8)
 8001768:	20000098 	.word	0x20000098
 800176c:	40013800 	.word	0x40013800
 8001770:	20000118 	.word	0x20000118
 8001774:	2000008c 	.word	0x2000008c
 8001778:	20000014 	.word	0x20000014
 800177c:	0000ffff 	.word	0x0000ffff

08001780 <HAL_UART_TxCpltCallback>:
  UartReady = SET;
 8001780:	2201      	movs	r2, #1
 8001782:	4b01      	ldr	r3, [pc, #4]	; (8001788 <HAL_UART_TxCpltCallback+0x8>)
 8001784:	701a      	strb	r2, [r3, #0]
}
 8001786:	4770      	bx	lr
 8001788:	2000008c 	.word	0x2000008c

0800178c <HAL_UART_RxCpltCallback>:
 800178c:	2201      	movs	r2, #1
 800178e:	4b01      	ldr	r3, [pc, #4]	; (8001794 <HAL_UART_RxCpltCallback+0x8>)
 8001790:	701a      	strb	r2, [r3, #0]
 8001792:	4770      	bx	lr
 8001794:	2000008c 	.word	0x2000008c

08001798 <HAL_UART_ErrorCallback>:
{
 8001798:	b510      	push	{r4, lr}
    Error_Handler();
 800179a:	f7ff ff48 	bl	800162e <Error_Handler>
	...

080017a0 <HAL_GPIO_EXTI_Callback>:
  if(GPIO_Pin == USER_BUTTON_PIN)
 80017a0:	2380      	movs	r3, #128	; 0x80
 80017a2:	019b      	lsls	r3, r3, #6
 80017a4:	4298      	cmp	r0, r3
 80017a6:	d102      	bne.n	80017ae <HAL_GPIO_EXTI_Callback+0xe>
    UserButtonStatus = 1;
 80017a8:	2201      	movs	r2, #1
 80017aa:	4b01      	ldr	r3, [pc, #4]	; (80017b0 <HAL_GPIO_EXTI_Callback+0x10>)
 80017ac:	605a      	str	r2, [r3, #4]
}
 80017ae:	4770      	bx	lr
 80017b0:	2000008c 	.word	0x2000008c

080017b4 <HAL_UART_MspInit>:
{  
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 80017b4:	2280      	movs	r2, #128	; 0x80
 80017b6:	4b1f      	ldr	r3, [pc, #124]	; (8001834 <HAL_UART_MspInit+0x80>)
{  
 80017b8:	b530      	push	{r4, r5, lr}
  USARTx_TX_GPIO_CLK_ENABLE();
 80017ba:	6959      	ldr	r1, [r3, #20]
 80017bc:	0292      	lsls	r2, r2, #10
 80017be:	4311      	orrs	r1, r2
 80017c0:	6159      	str	r1, [r3, #20]
 80017c2:	6959      	ldr	r1, [r3, #20]
{  
 80017c4:	b089      	sub	sp, #36	; 0x24
  USARTx_TX_GPIO_CLK_ENABLE();
 80017c6:	4011      	ands	r1, r2
 80017c8:	9100      	str	r1, [sp, #0]
 80017ca:	9900      	ldr	r1, [sp, #0]
  USARTx_RX_GPIO_CLK_ENABLE();
 80017cc:	6959      	ldr	r1, [r3, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
  GPIO_InitStruct.Alternate = USARTx_TX_AF;

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80017ce:	2590      	movs	r5, #144	; 0x90
  USARTx_RX_GPIO_CLK_ENABLE();
 80017d0:	4311      	orrs	r1, r2
 80017d2:	6159      	str	r1, [r3, #20]
 80017d4:	6959      	ldr	r1, [r3, #20]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80017d6:	2401      	movs	r4, #1
  USARTx_RX_GPIO_CLK_ENABLE();
 80017d8:	400a      	ands	r2, r1
  USARTx_CLK_ENABLE(); 
 80017da:	2180      	movs	r1, #128	; 0x80
  USARTx_RX_GPIO_CLK_ENABLE();
 80017dc:	9201      	str	r2, [sp, #4]
 80017de:	9a01      	ldr	r2, [sp, #4]
  USARTx_CLK_ENABLE(); 
 80017e0:	699a      	ldr	r2, [r3, #24]
 80017e2:	01c9      	lsls	r1, r1, #7
 80017e4:	430a      	orrs	r2, r1
 80017e6:	619a      	str	r2, [r3, #24]
 80017e8:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80017ea:	05ed      	lsls	r5, r5, #23
  USARTx_CLK_ENABLE(); 
 80017ec:	400b      	ands	r3, r1
 80017ee:	9302      	str	r3, [sp, #8]
 80017f0:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 80017f2:	2380      	movs	r3, #128	; 0x80
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80017f8:	3bff      	subs	r3, #255	; 0xff
 80017fa:	3bff      	subs	r3, #255	; 0xff
 80017fc:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80017fe:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001800:	191b      	adds	r3, r3, r4
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8001802:	0028      	movs	r0, r5
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001804:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8001806:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8001808:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 800180a:	f7fe fe6d 	bl	80004e8 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 800180e:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Alternate = USARTx_RX_AF;

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8001810:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8001812:	00db      	lsls	r3, r3, #3
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8001814:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8001816:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8001818:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 800181a:	f7fe fe65 	bl	80004e8 <HAL_GPIO_Init>
    
  /*##-3- Configure the NVIC for UART ########################################*/
  /* NVIC for USART */
  HAL_NVIC_SetPriority(USARTx_IRQn, 0, 1);
 800181e:	0022      	movs	r2, r4
 8001820:	2100      	movs	r1, #0
 8001822:	201b      	movs	r0, #27
 8001824:	f7fe fddc 	bl	80003e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTx_IRQn);
 8001828:	201b      	movs	r0, #27
 800182a:	f7fe fe03 	bl	8000434 <HAL_NVIC_EnableIRQ>
}
 800182e:	b009      	add	sp, #36	; 0x24
 8001830:	bd30      	pop	{r4, r5, pc}
 8001832:	46c0      	nop			; (mov r8, r8)
 8001834:	40021000 	.word	0x40021000

08001838 <HAL_UART_MspDeInit>:
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
  /*##-1- Reset peripherals ##################################################*/
  USARTx_FORCE_RESET();
 8001838:	2280      	movs	r2, #128	; 0x80
 800183a:	4b0d      	ldr	r3, [pc, #52]	; (8001870 <HAL_UART_MspDeInit+0x38>)
 800183c:	01d2      	lsls	r2, r2, #7
 800183e:	68d9      	ldr	r1, [r3, #12]
{
 8001840:	b510      	push	{r4, lr}
  USARTx_FORCE_RESET();
 8001842:	430a      	orrs	r2, r1
 8001844:	60da      	str	r2, [r3, #12]
  USARTx_RELEASE_RESET();
 8001846:	68da      	ldr	r2, [r3, #12]
 8001848:	490a      	ldr	r1, [pc, #40]	; (8001874 <HAL_UART_MspDeInit+0x3c>)

  /*##-2- Disable peripherals and GPIO Clocks #################################*/
  /* Configure UART Tx as alternate function  */
  HAL_GPIO_DeInit(USARTx_TX_GPIO_PORT, USARTx_TX_PIN);
 800184a:	2490      	movs	r4, #144	; 0x90
  USARTx_RELEASE_RESET();
 800184c:	400a      	ands	r2, r1
  HAL_GPIO_DeInit(USARTx_TX_GPIO_PORT, USARTx_TX_PIN);
 800184e:	2180      	movs	r1, #128	; 0x80
 8001850:	05e4      	lsls	r4, r4, #23
  USARTx_RELEASE_RESET();
 8001852:	60da      	str	r2, [r3, #12]
  HAL_GPIO_DeInit(USARTx_TX_GPIO_PORT, USARTx_TX_PIN);
 8001854:	0020      	movs	r0, r4
 8001856:	0089      	lsls	r1, r1, #2
 8001858:	f7fe ff02 	bl	8000660 <HAL_GPIO_DeInit>
  /* Configure UART Rx as alternate function  */
  HAL_GPIO_DeInit(USARTx_RX_GPIO_PORT, USARTx_RX_PIN);
 800185c:	2180      	movs	r1, #128	; 0x80
 800185e:	0020      	movs	r0, r4
 8001860:	00c9      	lsls	r1, r1, #3
 8001862:	f7fe fefd 	bl	8000660 <HAL_GPIO_DeInit>
  
  /*##-3- Disable the NVIC for UART ##########################################*/
  HAL_NVIC_DisableIRQ(USARTx_IRQn);
 8001866:	201b      	movs	r0, #27
 8001868:	f7fe fdf0 	bl	800044c <HAL_NVIC_DisableIRQ>
}
 800186c:	bd10      	pop	{r4, pc}
 800186e:	46c0      	nop			; (mov r8, r8)
 8001870:	40021000 	.word	0x40021000
 8001874:	ffffbfff 	.word	0xffffbfff

08001878 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8001878:	4770      	bx	lr

0800187a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800187a:	e7fe      	b.n	800187a <HardFault_Handler>

0800187c <SVC_Handler>:
 800187c:	4770      	bx	lr

0800187e <PendSV_Handler>:
 800187e:	4770      	bx	lr

08001880 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001880:	b510      	push	{r4, lr}
  HAL_IncTick();
 8001882:	f7fe fd89 	bl	8000398 <HAL_IncTick>
}
 8001886:	bd10      	pop	{r4, pc}

08001888 <USART1_IRQHandler>:
  * @retval None
  * @Note   This function is redefined in "main.h" and related to DMA  
  *         used for USART data transmission     
  */
void USARTx_IRQHandler(void)
{
 8001888:	b510      	push	{r4, lr}
  HAL_UART_IRQHandler(&UartHandle);
 800188a:	4802      	ldr	r0, [pc, #8]	; (8001894 <USART1_IRQHandler+0xc>)
 800188c:	f7ff fc0c 	bl	80010a8 <HAL_UART_IRQHandler>
}
 8001890:	bd10      	pop	{r4, pc}
 8001892:	46c0      	nop			; (mov r8, r8)
 8001894:	20000098 	.word	0x20000098

08001898 <EXTI4_15_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI4_15_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_PIN);
 8001898:	2080      	movs	r0, #128	; 0x80
{
 800189a:	b510      	push	{r4, lr}
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_PIN);
 800189c:	0180      	lsls	r0, r0, #6
 800189e:	f7fe ff61 	bl	8000764 <HAL_GPIO_EXTI_IRQHandler>
}
 80018a2:	bd10      	pop	{r4, pc}

080018a4 <__libc_init_array>:
 80018a4:	b570      	push	{r4, r5, r6, lr}
 80018a6:	2600      	movs	r6, #0
 80018a8:	4d0c      	ldr	r5, [pc, #48]	; (80018dc <__libc_init_array+0x38>)
 80018aa:	4c0d      	ldr	r4, [pc, #52]	; (80018e0 <__libc_init_array+0x3c>)
 80018ac:	1b64      	subs	r4, r4, r5
 80018ae:	10a4      	asrs	r4, r4, #2
 80018b0:	42a6      	cmp	r6, r4
 80018b2:	d109      	bne.n	80018c8 <__libc_init_array+0x24>
 80018b4:	2600      	movs	r6, #0
 80018b6:	f000 f823 	bl	8001900 <_init>
 80018ba:	4d0a      	ldr	r5, [pc, #40]	; (80018e4 <__libc_init_array+0x40>)
 80018bc:	4c0a      	ldr	r4, [pc, #40]	; (80018e8 <__libc_init_array+0x44>)
 80018be:	1b64      	subs	r4, r4, r5
 80018c0:	10a4      	asrs	r4, r4, #2
 80018c2:	42a6      	cmp	r6, r4
 80018c4:	d105      	bne.n	80018d2 <__libc_init_array+0x2e>
 80018c6:	bd70      	pop	{r4, r5, r6, pc}
 80018c8:	00b3      	lsls	r3, r6, #2
 80018ca:	58eb      	ldr	r3, [r5, r3]
 80018cc:	4798      	blx	r3
 80018ce:	3601      	adds	r6, #1
 80018d0:	e7ee      	b.n	80018b0 <__libc_init_array+0xc>
 80018d2:	00b3      	lsls	r3, r6, #2
 80018d4:	58eb      	ldr	r3, [r5, r3]
 80018d6:	4798      	blx	r3
 80018d8:	3601      	adds	r6, #1
 80018da:	e7f2      	b.n	80018c2 <__libc_init_array+0x1e>
 80018dc:	08001954 	.word	0x08001954
 80018e0:	08001954 	.word	0x08001954
 80018e4:	08001954 	.word	0x08001954
 80018e8:	08001958 	.word	0x08001958

080018ec <memcpy>:
 80018ec:	2300      	movs	r3, #0
 80018ee:	b510      	push	{r4, lr}
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d100      	bne.n	80018f6 <memcpy+0xa>
 80018f4:	bd10      	pop	{r4, pc}
 80018f6:	5ccc      	ldrb	r4, [r1, r3]
 80018f8:	54c4      	strb	r4, [r0, r3]
 80018fa:	3301      	adds	r3, #1
 80018fc:	e7f8      	b.n	80018f0 <memcpy+0x4>
	...

08001900 <_init>:
 8001900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001902:	46c0      	nop			; (mov r8, r8)
 8001904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001906:	bc08      	pop	{r3}
 8001908:	469e      	mov	lr, r3
 800190a:	4770      	bx	lr

0800190c <_fini>:
 800190c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800190e:	46c0      	nop			; (mov r8, r8)
 8001910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001912:	bc08      	pop	{r3}
 8001914:	469e      	mov	lr, r3
 8001916:	4770      	bx	lr
